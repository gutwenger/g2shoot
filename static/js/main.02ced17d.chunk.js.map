{"version":3,"sources":["components/home/HomeBtn.js","data/instructions_EN.js","data/instructions_HK.js","context/LangContext.js","components/home/Home.js","data/setupData.js","components/setup/SetupGrp.js","context/GameContext.js","context/RoundContext.js","components/setup/SetupForm.js","components/setup/Setup.js","components/game/GameCard.js","components/game/GameBall.js","components/game/GamePanelBet.js","components/game/GamePanelResult.js","components/game/GamePanelControl.js","components/game/GamePanelInfo.js","components/game/GamePanel.js","components/game/GameWoodWorks.js","components/game/Game.js","components/content/Content.js","components/navbar/NavLogo.js","components/navbar/NavMenuGrp.js","components/navbar/NavMenu.js","components/navbar/Navbar.js","components/result/ResultPlayerCard.js","components/result/ResultPlayers.js","components/result/ResultGameCard.js","components/result/ResultGame.js","components/result/ResultButton.js","components/result/Result.js","components/endGame/EndGame.js","data/howtoData.js","components/howto/HowtoCard.js","components/howto/Howto.js","components/contact/Contact.js","App.js","index.js"],"names":["HomeBtn","icon","page","title","setTopPage","changePage","className","onClick","INSTRUCTIONS","language","navbar","resume","endGame","play","result","home","howToPlay","homeBtns","playNow","setup","gameSetup","startGame","numberOfPlayers","numberOfCardsets","initialBalance","initialPool","game","gameWoodWorks","get","gameBall","afterPlacingBet","gamePanel","info","player","balance","pool","cards","control","woodworks","bet","ball","results","win","lose","loseDouble","nextRound","seeResult","totalPool","totalPlayers","remainingCards","players","howto","LangContext","React","createContext","useLang","useContext","LangProvider","children","useState","lang","setLang","TEXT_EN","texts","setTexts","EN","HK","TEXT_HK","Provider","value","handleChangeLanguage","Home","id","SETUP_GAME_FORM","label","name","min","max","defaultValue","SetupGrp","item","htmlFor","type","required","GameContext","GameFunctionsContext","useGame","useGameFunctions","GameProvider","setGame","isGameOver","setIsGameOver","generateCards","CARD_SCHEME","spade","heart","club","diamond","CARD_NUMBER","1","2","3","4","5","6","7","8","9","10","11","12","13","CARDS","i","SCHEME","j","push","number","scheme","symbol","setupGame","newGame","PLAYERS","Number","isActive","loseSmall","loseBig","generatePlayer","cardReserve","currentPlayerID","Math","floor","random","usedCards","gameHistory","getCard","remainingNumberOfCards","length","randomIndex","card","splice","prevState","get2Cards","card1","card2","sort","a","b","gameOver","updatePlayer","playerIndex","findIndex","newPlayers","slice","updatePool","updateGame","round","checkValidGame","some","RoundContext","RoundFunctionsContext","useRound","useRoundFunctions","RoundProvider","setupRound","setRound","setNextRound","checkTurn","stage","source","nextPlayerID","nextPlayerFound","counter","setupInitialRound","getWoodworks","prevRound","placeBet","getBall","getResult","minVal","maxVal","CardVal","playerBalance","prize","hasNextRound","roundResult","prevGame","history","endRound","SetupForm","createGame","formRef","useRef","formItems","map","ref","onSubmit","event","preventDefault","FORM","current","data","forEach","handleSubmit","Setup","GameCard","handleCardClick","cardClicked","setCardClicked","gameCardDivClass","display","handleClick","GameBall","clicked","setClicked","useEffect","readyToGetCard","GamePanelBet","betRef","MAX_BET","GamePanelResult","resultClass","GamePanelControl","GamePanelInfoGrp","playerClass","GamePanelInfo","GamePanel","GameWoodWorks","Set","disabled","setDisabled","add","size","Game","Content","currentPage","PAGE","NavLogo","NavMenuGrp","path","handleChangePage","NavMenu","handleTopPage","handleShowResult","handleShowEndGame","Navbar","navIsOpen","setNavIsOpen","navBtnIcon","navMenu","ResultPlayerCard","ResultPlayers","ResultGameCard","moneySymbol","ResultGame","ResultButton","returnToGame","Result","EndGame","HOW_TO_HK","HOW_TO_EN","HowtoCard","step","descriptions","descriptionsDisplay","console","log","Howto","howtoDisplay","Contact","App","topPage","setCurrentPage","TOP_PAGE","endgame","contact","default","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAoBeA,EAlBC,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,WAU9C,OACI,sBAAKC,UAAU,UAAUC,QAAS,WARrB,UAATL,EACAE,EAAW,SAEXC,EAAWH,IAKf,UACI,mBAAGI,UAAS,qBAAgBL,KAC5B,mBAAGK,UAAU,aAAb,SAA4BH,QCf3BK,EAAe,CACxBC,SAAU,KACVC,OAAQ,CACJC,OAAQ,SACRC,QAAS,WACTC,KAAM,OACNC,OAAQ,SACRC,KAAM,OACNC,UAAW,cACXP,SAAU,gBAEdM,KAAM,CACFE,SAAU,CACNC,QAAS,WACTF,UAAW,gBAGnBG,MAAO,CACHC,UAAW,aACXC,UAAW,aACXC,gBAAiB,oBACjBC,iBAAkB,qBAClBC,eAAgB,kBAChBC,YAAa,gBAEjBC,KAAM,CACFC,cAAe,CACXxB,MAAO,YACPyB,IAAK,OAETC,SAAU,CACN1B,MAAO,OACPyB,IAAK,MACLE,gBAAiB,uCAErBC,UAAW,CACPC,KAAM,CACFC,OAAQ,SACRC,QAAS,UACTC,KAAM,OACNC,MAAO,SAEXC,QAAS,CACLC,UAAW,yBACXC,IAAK,MACLC,KAAM,oBACN1B,OAAQ,CACJ2B,QAAS,CACLC,IAAK,MACLC,KAAM,OACNC,WAAY,iBAEhBC,UAAW,aACXC,UAAW,iBAK3BlC,QAAS,CACLT,MAAO,YACPQ,OAAQ,SACRC,QAAS,YAEbE,OAAQ,CACJY,KAAM,CACFvB,MAAO,aACP4C,UAAW,aACXC,aAAc,gBACdC,eAAgB,mBAEpBC,QAAS,CACL/C,MAAO,UACP8B,OAAQ,SACRnB,OAAQ,cACRoB,QAAS,YAGjBiB,MAAO,CACHhD,MAAO,gBC9EFK,EAAe,CACxBC,SAAU,KACVC,OAAQ,CACJC,OAAQ,eACRC,QAAS,eACTC,KAAM,eACNC,OAAQ,qBACRC,KAAM,eACNC,UAAW,eACXP,SAAU,gBAEdM,KAAM,CACFE,SAAU,CACNC,QAAS,eACTF,UAAW,iBAGnBG,MAAO,CACHC,UAAW,2BACXC,UAAW,2BACXC,gBAAiB,2BACjBC,iBAAkB,iCAClBC,eAAgB,2BAChBC,YAAa,4BAEjBC,KAAM,CACFC,cAAe,CACXxB,MAAO,eACPyB,IAAK,gBAETC,SAAU,CACN1B,MAAO,SACPyB,IAAK,eACLE,gBAAiB,2DAErBC,UAAW,CACPC,KAAM,CACFC,OAAQ,eACRC,QAAS,eACTC,KAAM,eACNC,MAAO,4BAEXC,QAAS,CACLC,UAAW,iDACXC,IAAK,eACLC,KAAM,2CACN1B,OAAQ,CACJ2B,QAAS,CACLC,IAAK,SACLC,KAAM,SACNC,WAAY,gBAEhBC,UAAW,eACXC,UAAW,yBAK3BlC,QAAS,CACLT,MAAO,gBACPQ,OAAQ,eACRC,QAAS,gBAEbE,OAAQ,CACJY,KAAM,CACFvB,MAAO,2BACP4C,UAAW,qBACXC,aAAc,eACdC,eAAgB,4BAEpBC,QAAS,CACL/C,MAAO,2BACP8B,OAAQ,eACRnB,OAAQ,iCACRoB,QAAS,iBAGjBiB,MAAO,CACHhD,MAAO,iBC1ETiD,EAAcC,IAAMC,gBAEnB,SAASC,IACZ,OAAOC,qBAAWJ,GAGf,IAAMK,EAAe,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAElBC,mBAAS,MAFS,mBAEnCC,EAFmC,KAE7BC,EAF6B,OAGhBF,mBAASG,GAHO,mBAGnCC,EAHmC,KAG5BC,EAH4B,KAKpCxD,EAAe,CACjByD,GAAIH,EACJI,GAAIC,GAQR,OACI,cAACf,EAAYgB,SAAb,CAAsBC,MAAO,CAAEN,QAAOH,OAAMU,qBANhD,YAAyC,IAATV,EAAQ,EAARA,KAC5BC,EAAQD,GACRI,EAASxD,EAAaoD,MAItB,SACMF,KCGCa,EAzBF,SAAC,GAAgC,IAA9BlE,EAA6B,EAA7BA,WAAYD,EAAiB,EAAjBA,WAEhB2D,EAAUR,IAAVQ,MAER,OACI,sBAAKS,GAAG,OAAOlE,UAAU,OAAzB,UACI,cAAC,EAAD,CAEIJ,KAAK,QACLD,KAAK,uBACLE,MAAO4D,GAASA,EAAMhD,KAAKE,SAASC,QACpCb,WAAYA,GAJR,gBAMR,cAAC,EAAD,CAEIH,KAAK,QACLD,KAAK,cACLE,MAAO4D,GAASA,EAAMhD,KAAKE,SAASD,UACpCX,WAAYA,EACZD,WAAYA,GALR,oBCnBPqE,EAAkB,CAC3B,CACIC,MAAO,oBACPC,KAAM,kBACNC,IAAK,EACLC,IAAK,GACLC,aAAc,GAElB,CACIJ,MAAO,qBACPC,KAAM,mBACNC,IAAK,EACLC,IAAK,IACLC,aAAc,GAElB,CACIJ,MAAO,iBACPC,KAAM,iBACNC,IAAK,GACLC,IAAK,IACLC,aAAc,IAElB,CACIJ,MAAO,eACPC,KAAM,cACNC,IAAK,EACLC,IAAK,IACLC,aAAc,ICJPC,EArBE,SAAC,GAAuD,IAArDL,EAAoD,EAApDA,MAAoD,IAA7CM,KAAQL,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,IAAKC,EAA0B,EAA1BA,IAAKC,EAAqB,EAArBA,aAE/C,OACI,sBAAKxE,UAAU,WAAf,UACI,uBAAO2E,QAAO,mBAAcN,GAAQrE,UAAU,kBAA9C,SACMoE,IAEN,uBACIF,GAAE,mBAAcG,GAChBrE,UAAU,kBACVqE,KAAMA,EACNO,KAAK,SACLN,IAAKA,EACLC,IAAKA,EACLC,aAAcA,EACdK,UAAQ,Q,cCflBC,EAAc/B,IAAMC,gBACpB+B,EAAuBhC,IAAMC,gBAE5B,SAASgC,IACZ,OAAO9B,qBAAW4B,GAGf,SAASG,IACZ,OAAO/B,qBAAW6B,GAGf,IAAMG,EAAe,SAAC,GAAkB,IAAhB9B,EAAe,EAAfA,SAAe,EAclBC,mBAAS,MAdS,mBAcnCjC,EAdmC,KAc7B+D,EAd6B,OAeN9B,oBAAS,GAfH,mBAenC+B,EAfmC,KAevBC,EAfuB,KAsC1C,SAASC,EAAT,GA8BI,IA9B0C,IAArBrE,EAAoB,EAApBA,iBAGfsE,EAAc,CAChBC,MAAO,SACPC,MAAO,SACPC,KAAM,SACNC,QAAS,UAGPC,EAAc,CAChBC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,GAAI,KACJC,GAAI,IACJC,GAAI,IACJC,GAAI,KAGFC,EAAQ,GAEVxC,EAAK,EAEAyC,EAAI,EAAGA,EAAI1F,EAAkB0F,IAClC,IAAK,IAAMC,KAAUrB,EACjB,IAAK,IAAIsB,EAAI,EAAGA,EAAI,GAAIA,IACpBH,EAAMI,KAAK,CACP5C,KACA6C,OAAQnB,EAAYiB,GACpBG,OAAQJ,EACRK,OAAQ1B,EAAYqB,GACpB7C,MAAO8C,IAEX3C,IAIZ,OAAOwC,EAwKX,OACI,cAAC5B,EAAYhB,SAAb,CAAsBC,MAAO,CAAE3C,OAAMgE,cAArC,SACI,cAACL,EAAqBjB,SAAtB,CAA+BC,MAAO,CAClCmD,UAvKZ,YAAwF,IAAnElG,EAAkE,EAAlEA,gBAAiBE,EAAiD,EAAjDA,eAAgBD,EAAiC,EAAjCA,iBAAkBE,EAAe,EAAfA,YAqBhEgG,EAAU,CACVnG,kBACAC,mBACAE,cACAyB,QA7FR,YAKI,IAL0D,IAApC5B,EAAmC,EAAnCA,gBAAiBE,EAAkB,EAAlBA,eAGjCkG,EAAU,GAEPT,EAAI,EAAGA,EAAI3F,EAAiB2F,IACjCS,EAAQN,KAAK,CACT5C,GAAIyC,EACJ/E,QAASyF,OAAOnG,GAChBoG,UAAU,EACVlF,IAAK,EACLmF,UAAW,EACXC,QAAS,IAIjB,OAAOJ,EA6DOK,CAAe,CAAEzG,kBAAiBE,mBAiB5CwG,YAdcpC,EAAc,CAAErE,qBAe9BY,KAZOV,EAAcH,EAarB2G,gBAVkBC,KAAKC,MAAMD,KAAKE,SAAW9G,GAW7C+G,UAAW,GACXC,YAAa,IAMjB,OAFA7C,EAAQgC,GAEDA,GAmIYhC,UAAS8C,QAvFhC,WAMI,IAAIC,EAAyB9G,EAAKsG,YAAYS,OAC1CC,EAAcR,KAAKC,MAAMD,KAAKE,SAAWI,GACzCG,EAAOjH,EAAKsG,YAAYY,OAAOF,EAAa,GAAG,GAOnD,OALAjD,GAAQ,SAAAoD,GAAS,kCACVA,GADU,IAEbR,UAAU,GAAD,mBAAMQ,EAAUR,WAAhB,CAA2BM,SAGjCA,GAwE8BG,UApEzC,WAOI,IAAId,EAActG,EAAKsG,YACnBQ,EAAyBR,EAAYS,OACrCM,EAAQf,EAAYY,OAAOV,KAAKC,MAAMD,KAAKE,SAAWI,GAAyB,GAAG,GAClFQ,EAAQhB,EAAYY,OAAOV,KAAKC,MAAMD,KAAKE,SAAWI,EAAyB,GAAI,GAAG,GAO1F,OALA/C,GAAQ,SAAAoD,GAAS,kCACVA,GADU,IAEbR,UAAU,GAAD,mBAAMQ,EAAUR,WAAhB,CAA2BU,EAAOC,SAGxC,CAACD,EAAOC,GAAOC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE7E,MAAQ8E,EAAE9E,UAmDD+E,SARpD,WACI3D,EAAQ,MACRE,GAAc,IAM4C0D,aA/C9D,YAAmC,IAAXpH,EAAU,EAAVA,OAKhBqH,EAAc5H,EAAKwB,QAAQqG,WAAU,SAAAvE,GAAI,OAAIA,EAAKR,KAAOvC,EAAOuC,MAChEgF,EAAa9H,EAAKwB,QAAQuG,QAC9BD,EAAWF,GAAerH,EAC1BwD,GAAQ,SAAAoD,GAAS,kCACVA,GADU,IAEb3F,QAASsG,QAqC2DE,WAhC5E,YAA+B,IAATvH,EAAQ,EAARA,KAKlBsD,GAAQ,SAAAoD,GAAS,kCACVA,GADU,IAEb1G,aAyBgFwH,WApBxF,YAAgC,IAAVC,EAAS,EAATA,MAKlBnE,GAAQ,SAAAoD,GAAS,kCACVA,GADU,IAEbP,YAAY,GAAD,mBAAMO,EAAUP,aAAhB,CAA6BsB,UAaoDC,eA1GpG,WACI,QAZ0BnI,EAAKsG,YAAYS,OACjB,IAMnB/G,EAAKwB,QAAQ4G,MAAK,SAAA7H,GAAM,OAAIA,EAAO2F,eA6GtC,SAGMlE,OCxQZqG,EAAe1G,IAAMC,gBACrB0G,EAAwB3G,IAAMC,gBAE7B,SAAS2G,IACZ,OAAOzG,qBAAWuG,GAGf,SAASG,IACZ,OAAO1G,qBAAWwG,GAGf,IAAMG,EAAgB,SAAC,GAAkB,IAAhBzG,EAAe,EAAfA,SAEpBhC,EAAS4D,IAAT5D,KAFmC,EAG4D6D,IAA/FE,EAHmC,EAGnCA,QAAS+B,EAH0B,EAG1BA,UAAWe,EAHe,EAGfA,QAASO,EAHM,EAGNA,UAAWM,EAHL,EAGKA,SAAUC,EAHf,EAGeA,aAAcK,EAH7B,EAG6BA,WAAYG,EAHzC,EAGyCA,eAHzC,EAIjBlG,oBAAS,kBAAIyG,OAJI,mBAIpCR,EAJoC,KAI7BS,EAJ6B,OAKT1G,oBAAS,GALA,mBAKpCd,EALoC,KAKzByH,EALyB,KA6B3C,SAASF,IAGL,IAAK1I,EAAM,OAAO,KAGlB,IAAIO,EAASsI,EAAU,IAGvBF,EAAS,CACLG,MAAO,YACPvI,OAAQA,EACRK,UAAW,GACXC,IAAK,EACLC,KAAM,KACN1B,OAAQ,KAGZwJ,GAAa,GAIjB,SAASC,EAAT,GAYI,IAZ6B,IAAZ9C,EAAW,EAAXA,QAKbgD,EAAUhD,GAAU/F,EAEpBwB,EAAUuH,EAAOvH,QACjBwH,EAAeD,EAAOxC,gBACtB0C,GAAkB,EAClBC,EAAU,GAEND,GAOJ,GALAC,GAAW,GADXF,GAAgB,KAGKxH,EAAQuF,SAAQiC,GAAgBxH,EAAQuF,QAEzDvF,EAAQwH,GAAc9C,WAAU+C,GAAkB,GAClDC,IAAY1H,EAAQuF,OAAS,EAAG,OAAO,EAS/C,OALAhD,GAAQ,SAAAoD,GAAS,kCACVA,GADU,IAEbZ,gBAAiByC,OAGdxH,EAAQwH,GA8JnB,OACI,cAACX,EAAa3F,SAAd,CAAuBC,MAAO,CAAEuF,QAAO/G,aAAvC,SACI,cAACmH,EAAsB5F,SAAvB,CAAgCC,MAAO,CACnCgG,WAAUD,aAAYS,kBAxOlC,YAAgG,IAAnEvJ,EAAkE,EAAlEA,gBAAiBE,EAAiD,EAAjDA,eAAgBD,EAAiC,EAAjCA,iBAAkBE,EAAe,EAAfA,YAKxEQ,EAASsI,EAAU,CAAE9C,QAHXD,EAAU,CAAElG,kBAAiBE,iBAAgBD,mBAAkBE,kBAM7E4I,EAAS,CACLG,MAAO,YACPvI,OAAQA,EACRK,UAAW,GACXC,IAAK,EACLC,KAAM,KACN1B,OAAQ,KAGZwJ,GAAa,IAwNLQ,aA9JZ,WAMI,IAAIxI,EAAYwG,IAGhBuB,GAAS,SAAAU,GAAS,kCACXA,GADW,IAEdzI,kBAmJkB0I,SA9I1B,YAA4B,IAARzI,EAAO,EAAPA,IAKhB8H,GAAS,SAAAU,GAAS,kCACXA,GADW,IAEdP,MAAO,OACPjI,YAsI4B0I,QAjIpC,WAMI,IAAIzI,EAAO+F,IAEX8B,GAAS,SAAAU,GAAS,kCACXA,GADW,IAEdvI,aAuHqC0I,UAlH7C,WAKI,IAAIjJ,EAAS2H,EAAM3H,OACfkJ,EAASvB,EAAMtH,UAAU,GAAG+B,MAC5B+G,EAASxB,EAAMtH,UAAU,GAAG+B,MAC5BgH,EAAUzB,EAAMpH,KAAK6B,MACrBlC,EAAOwF,OAAOjG,EAAKS,MACnBmJ,EAAgB3D,OAAO1F,EAAOC,SAC9BK,EAAMoF,OAAOiC,EAAMrH,KACnBgJ,EAAQ,EAERzK,EAASuK,EAAUF,GAAUE,EAAUD,EACzB,MACAC,IAAYF,GAAUE,IAAYD,EAC9B,UACA,YAQtB,OAAQtK,GACJ,IAAK,MACDwK,GAAiB/I,EACjBJ,GAAQI,EACRgJ,EAAQhJ,EACR,MACJ,IAAK,YACD+I,GAAiB/I,EACjBJ,GAAQI,EACRgJ,GAAShJ,EACT,MACJ,IAAK,UACD+I,GAAwB,EAAN/I,EAClBJ,GAAe,EAANI,EACTgJ,GAAgB,EAANhJ,EAQlBN,EAAOC,QAAUoJ,EAGjBrJ,EAAO2F,SAAW0D,EAAgB,EAGlCrJ,EAAOnB,KAGPuI,EAAa,CAAEpH,WAGfyH,EAAW,CAAEvH,SAGb,IAAIqJ,EAAe3B,KAAoB1H,EAAO,EAE1CsJ,EAAc,CACd3K,SAAQyK,SAiBZ,OAdAlB,GAAS,SAAAxB,GAAS,kCACXA,GADW,IAEd2B,MAAO,SACP1J,OAAQ2K,OAIZhG,GAAQ,SAAAiG,GAAQ,kCACTA,GADS,IAEZC,QAAQ,GAAD,mBAAMD,EAASpD,aAAf,CAA4BmD,SAGvCnB,EAAakB,GAENC,GA+B6CG,SA3BxD,WAMIxB,KAqB8DxJ,QAlBlE,WAMIyJ,EAAS,MACTC,GAAa,GAGblB,MAMI,SAIM1F,OChNHmI,EA1CU,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,WAAYzL,EAAiB,EAAjBA,WAG5B0D,GADemG,IAAfE,WACU7G,IAAVQ,OAEJgI,EAAUC,mBAEVC,EAAYxH,EAAgByH,KAAI,SAAClH,EAAMiC,GAAP,OAChC,cAAC,EAAD,CAEIvC,MAAQX,EAAM5C,MAAM6D,EAAKL,MACzBK,KAAMA,GAHV,mBACqBiC,OAoBzB,OACI,uBAAM3G,UAAU,YAAY6L,IAAKJ,EAASK,SAAU,SAACC,GAAD,OAfxD,SAAsBA,GAClBA,EAAMC,iBACN,IAAMC,EAAOR,EAAQS,QAGjBC,EAAO,GACXhI,EAAgBiI,SAAQ,SAAA1H,GACpByH,EAAKzH,EAAKL,MAAQ4H,EAAKvH,EAAKL,MAAMN,SAGtCyH,EAAWW,GACXpM,EAAW,QAIkDsM,CAAaN,IAA1E,UACI,oBAAI/L,UAAU,gBAAd,SACMyD,EAAM5C,MAAMC,YAEhB6K,EACF,wBAAQ3L,UAAU,iBAAlB,SACMyD,EAAM5C,MAAME,gBClBfuL,EApBD,SAAC,GAAoB,IAAlBvM,EAAiB,EAAjBA,WAGLwK,GADctF,IAAdiC,UACsB0C,IAAtBW,mBAMR,OACI,qBAAKrG,GAAG,QAAQlE,UAAU,QAA1B,SACI,cAAC,EAAD,CAEIwL,WARZ,YAAyF,IAAnExK,EAAkE,EAAlEA,gBAAiBE,EAAiD,EAAjDA,eAAgBD,EAAiC,EAAjCA,iBAAkBE,EAAe,EAAfA,YACrEoJ,EAAkB,CAAEvJ,kBAAiBE,iBAAgBD,mBAAkBE,iBAQ/DpB,WAAYA,GAFR,gBCyBLwM,EAzCS,SAAC,GAAsC,IAApClE,EAAmC,EAAnCA,KAAMmE,EAA6B,EAA7BA,gBAAiBzI,EAAY,EAAZA,MAAY,EAEpBV,oBAAS,GAFW,mBAEnDoJ,EAFmD,KAEtCC,EAFsC,KAWtDC,EAAoBtE,IAAyB,UAAhBA,EAAKrB,QAAsC,YAAhBqB,EAAKrB,SAA0B,sBAEvF4F,EAAUH,EAEN,sBAAKzM,UAAS,wBAAmB2M,GAAjC,UACI,qBAAK3M,UAAU,qBAAf,SACI,mBAAGA,UAAU,wBAAb,SAAuCqI,EAAKtB,WAEhD,mBAAG/G,UAAS,2BAfJ,CAChBwF,MAAO,wBACPC,MAAO,wBACPC,KAAM,uBACNC,QAAS,2BAW6C0C,EAAKrB,cAIvD,mBAAGhH,UAAU,gCAQrB,OACI,qBACIA,UAAU,WACVC,QAAS,kBARjB,YAAiC,IAAV8D,EAAS,EAATA,MACnByI,EAAgB,CAAEzI,UAClB2I,GAAe,GAMEG,CAAY,CAAE9I,WAF/B,SAIM6I,KC4CCE,EA5EE,SAAC,GAAe,IAAb5C,EAAY,EAAZA,MAERzG,EAAUR,IAAVQ,MACA6F,EAAUK,IAAVL,MAHoB,EAIGM,IAAvBe,EAJoB,EAIpBA,QAASC,EAJW,EAIXA,UAJW,EAKEvH,oBAAS,GALX,mBAKrB0J,EALqB,KAKZC,EALY,KAW5B,SAASR,IACAO,GAASnC,IACdoC,GAAW,GANfC,qBAAU,WACD3D,EAAMpH,MAAM8K,GAAW,MAQhC,IAAIE,EAAiB5D,EAAMpH,KAEnB,qBAAKlC,UAAU,iBAAf,SACI,cAAC,EAAD,CAEIqI,KAAMiB,EAAMpH,KACZsK,gBAAiBA,EACjBzI,MAAM,QAHF,cAQZ,qBAAK/D,UAAU,iBAAf,SACI,yBAAQA,UAAU,sBAAsBC,QAAS,kBAAI0K,KAArD,UACI,mBAAG3K,UAAU,gDACb,mBAAGA,UAAU,yBAAb,SACMyD,EAAMrC,KAAKG,SAASD,WAMtCsL,EAAU,CACV5K,UACI,qBAAKhC,UAAU,iBAAf,SACI,mBAAGA,UAAU,oBAAb,SACMyD,EAAMrC,KAAKG,SAASC,oBAIlCS,IACI,qBAAKjC,UAAU,iBAAf,SACI,mBAAGA,UAAU,oBAAb,SACMyD,EAAMrC,KAAKG,SAASC,oBAIlCU,KAAMgL,EACN1M,OACI,qBAAKR,UAAU,iBAAf,SACI,cAAC,EAAD,CAEIqI,KAAMiB,EAAMpH,KACZsK,gBAAiBA,EACjBzI,MAAM,QAHF,eASpB,OACI,sBAAKG,GAAG,WAAWlE,UAAU,WAA7B,UACI,mBAAGA,UAAU,cAAb,SACMyD,EAAMrC,KAAKG,SAAS1B,QAExB+M,EAAQ1C,OCnCPiD,EAnCM,WAAO,IAEhB1J,EAAUR,IAAVQ,MACArC,EAAS4D,IAAT5D,KACAkI,EAAUK,IAAVL,MACAoB,EAAad,IAAbc,SAEJ0C,EAAS1B,mBAEP2B,EAAU/D,EAAM3H,OAAOC,QAAUR,EAAKS,KAAOT,EAAKS,KAAOyH,EAAM3H,OAAOC,QAQ5E,OACI,uBAAMsC,GAAG,eAAelE,UAAU,eAAe8L,SAAU,SAACC,GAAD,OAP/D,SAAsBA,GAClBA,EAAMC,iBACN,IAAI/J,EAAMmL,EAAOlB,QAAQnI,MACzB2G,EAAS,CAAEzI,QAIyDoK,CAAaN,IAAjF,UACI,uBACI7H,GAAG,sBACHlE,UAAU,sBACVqE,KAAK,MACLO,KAAK,SACLN,IAAK,EACLC,IAAK8I,EACL7I,aAAc,EACdK,UAAQ,EACRgH,IAAKuB,IAET,wBAAQxI,KAAK,SAAS5E,UAAU,oBAAhC,SAAsDyD,EAAMrC,KAAKK,UAAUM,QAAQE,UCShFqL,EAzCS,SAAC,GAAoB,IAAlBxN,EAAiB,EAAjBA,WAEf2D,EAAUR,IAAVQ,MAFgC,EAGXkG,IAArBL,EAHgC,EAGhCA,MAAO/G,EAHyB,EAGzBA,UACP+I,EAAa1B,IAAb0B,SAEJ9K,EAAiC,QAAxB8I,EAAM9I,OAAOA,OACpBiD,EAAMrC,KAAKK,UAAUM,QAAQvB,OAAO2B,QAAQC,IACpB,cAAxBkH,EAAM9I,OAAOA,OACTiD,EAAMrC,KAAKK,UAAUM,QAAQvB,OAAO2B,QAAQE,KAC5CoB,EAAMrC,KAAKK,UAAUM,QAAQvB,OAAO2B,QAAQG,WAElDiL,EAAsC,QAAxBjE,EAAM9I,OAAOA,OACzB,4BACA,6BAUN,OACI,sBAAK0D,GAAG,kBAAkBlE,UAAU,kBAApC,UACI,sBAAKkE,GAAG,uBAAuBlE,UAAS,+BAA0BuN,GAAlE,UACI,mBAAGvN,UAAU,0BAAb,SACMQ,IAEN,oBAAGR,UAAU,6BAAb,cACMsJ,EAAM9I,OAAOyK,YAGvB,wBAAQjL,UAAU,uBAAuBC,QAAS,WAjBlDsC,EACA+I,IAEAxL,EAAW,WAcX,SACKyC,EAAYkB,EAAMrC,KAAKK,UAAUM,QAAQvB,OAAO+B,UAAYkB,EAAMrC,KAAKK,UAAUM,QAAQvB,OAAOgC,gBCQlGgL,EAzCU,SAAC,GAAgC,IAA9BzN,EAA6B,EAA7BA,WAAYD,EAAiB,EAAjBA,WAE5B2D,EAAUR,IAAVQ,MACA6F,EAAUK,IAAVL,MAEJsD,EAAU,CACV5K,UACI,sBAAKhC,UAAU,yBAAf,UACI,mBAAGA,UAAU,iCAAb,eACA,mBAAGA,UAAU,4BAAb,SAA2CyD,EAAMrC,KAAKK,UAAUM,QAAQC,eAGhFC,IACI,sBAAKjC,UAAU,yBAAf,UACI,mBAAGA,UAAU,iCAAb,eACA,cAAC,EAAD,GACQ,mBAIhBkC,KACI,sBAAKlC,UAAU,yBAAf,UACI,mBAAGA,UAAU,iCAAb,eACA,mBAAGA,UAAU,4BAAb,SAA2CyD,EAAMrC,KAAKK,UAAUM,QAAQG,UAGhF1B,OACQ,cAAC,EAAD,CACIT,WAAYA,EACZD,WAAYA,KAK5B,OACI,qBAAKE,UAAU,mBAAf,SACM4M,EAAQtD,EAAMY,UCrCtBuD,EAAmB,SAAC,GAAqB,IAAnB5N,EAAkB,EAAlBA,MAAOsM,EAAW,EAAXA,KAE3BlF,GAAoB,YAAVpH,GAAiC,SAAVA,IAAqB,IACtD6N,EAAwB,WAAV7N,GAAsB,iCAExC,OACI,sBAAKG,UAAU,mBAAf,UACI,mBAAGA,UAAU,0BAAb,SAAyCH,IACzC,oBAAGG,UAAS,iCAA4B0N,GAAxC,UAAyDzG,EAAUkF,SAqChEwB,EAhCO,WAAO,IAEjBlK,EAAUR,IAAVQ,MACArC,EAAS4D,IAAT5D,KACAkI,EAAUK,IAAVL,MAER,OACI,sBAAKtJ,UAAU,gBAAf,UACI,cAAC,EAAD,CAEIH,MAAQ4D,EAAMrC,KAAKK,UAAUC,KAAKC,OAClCwK,KAAM7C,EAAM3H,OAAOuC,IAFf,2BAIR,cAAC,EAAD,CAEIrE,MAAQ4D,EAAMrC,KAAKK,UAAUC,KAAKE,QAClCuK,KAAM7C,EAAM3H,OAAOC,SAFf,4BAIR,cAAC,EAAD,CAEI/B,MAAQ4D,EAAMrC,KAAKK,UAAUC,KAAKG,KAClCsK,KAAM/K,EAAKS,MAFP,yBAIR,cAAC,EAAD,CAEIhC,MAAQ4D,EAAMrC,KAAKK,UAAUC,KAAKI,MAClCqK,KAAM/K,EAAKsG,YAAYS,QAFnB,8BCxBLyF,EAfG,SAAC,GAAgC,IAA9B7N,EAA6B,EAA7BA,WAAYD,EAAiB,EAAjBA,WAC7B,OACI,sBAAKoE,GAAG,YAAYlE,UAAU,YAA9B,UACI,cAAC,EAAD,GACQ,iBAER,cAAC,EAAD,CAEID,WAAYA,EACZD,WAAYA,GAFR,wBCkEL+N,EAtEO,WAAO,IAEjBpK,EAAUR,IAAVQ,MACA6F,EAAUK,IAAVL,MAHgB,EAIWM,IAA3BG,EAJgB,EAIhBA,SAAUS,EAJM,EAINA,aAJM,EAKMnH,mBAAS,IAAIyK,KALnB,mBAKjBf,EALiB,KAKRC,EALQ,OAMQ3J,oBAAS,GANjB,mBAMjB0K,EANiB,KAMPC,EANO,KAmBxB,SAASxB,EAAT,GAAqC,IAAVzI,EAAS,EAATA,MACvBgJ,EAAQkB,IAAIlK,GACZiJ,EAAWD,GAEU,IAAjBA,EAAQmB,MAAeH,IACvBhE,GAAS,SAAAxB,GAAS,kCACXA,GADW,IAEd2B,MAAO,WAEX8D,GAAY,IApBpBf,qBAAU,WAKyB,IAA3B3D,EAAMtH,UAAUmG,SAChB6E,EAAW,IAAIc,KACfE,GAAY,MALjB,CAAC1E,IAsBJ,IAAIsD,EAAUtD,EAAMtH,UAAUmG,OAAS,EAE/B,sBAAKnI,UAAU,uBAAf,UACI,cAAC,EAAD,CAEIqI,KAAMiB,EAAMtH,UAAU,GACtBwK,gBAAiBA,EACjBzI,MAAM,OAHF,gBAKR,cAAC,EAAD,CAEIsE,KAAMiB,EAAMtH,UAAU,GACtBwK,gBAAiBA,EACjBzI,MAAM,OAHF,mBAQZ,qBAAK/D,UAAU,uBAAf,SACI,yBAAQA,UAAU,4BAA4BC,QAAS,kBAAIuK,KAA3D,UACI,mBAAGxK,UAAU,sDACb,mBAAGA,UAAU,+BAAb,SACMyD,EAAMrC,KAAKC,cAAcC,WAM/C,OACI,sBAAK4C,GAAG,gBAAgBlE,UAAU,gBAAlC,UACI,mBAAGA,UAAU,mBAAb,SACMyD,EAAMrC,KAAKC,cAAcxB,QAE7B+M,MC7CCuB,EApBF,SAAC,GAAgC,IAA9BpO,EAA6B,EAA7BA,WAAYD,EAAiB,EAAjBA,WAEhBwJ,EAAUK,IAAVL,MAER,OACI,sBAAKpF,GAAG,OAAOlE,UAAU,OAAzB,UACI,cAAC,EAAD,IACA,cAAC,EAAD,CAEIkK,MAAOZ,EAAMY,OADT,YAGR,cAAC,EAAD,CACIA,MAAOZ,EAAMY,MACbnK,WAAYA,EACZD,WAAYA,QCcbsO,EA7BC,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,YAAatO,EAA6B,EAA7BA,WAAYD,EAAiB,EAAjBA,WAElCwO,EAAO,CACT7N,KACI,cAAC,EAAD,CACIV,WAAYA,EACZD,WAAYA,IAGpBe,MACI,cAAC,EAAD,CACId,WAAYA,IAGpBqB,KACI,cAAC,EAAD,CACIrB,WAAYA,EACZD,WAAYA,KAKxB,OACI,qBAAKoE,GAAG,UAAUlE,UAAU,UAA5B,SACMsO,EAAKD,MCpBJE,EARC,WACZ,OACI,qBAAKrK,GAAG,UAAUlE,UAAU,UAA5B,SACI,oBAAIA,UAAU,cAAd,wBCKGwO,EARI,SAAC,GAAuC,IAArC3O,EAAoC,EAApCA,MAAO4O,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBAC/B,OACI,oBAAI1O,UAAU,kBAAkBC,QAAS,kBAAIyO,EAAiBD,IAA9D,SACM5O,KCkEC8O,EAhEC,SAAC,GAA8E,IAA5ED,EAA2E,EAA3EA,iBAAuDE,GAAoB,EAAzDC,iBAAyD,EAAvCC,kBAAuC,EAApBF,eAAoB,EAElD3L,IAAhCQ,EAFkF,EAElFA,MAAOO,EAF2E,EAE3EA,qBACP5C,EAAS4D,IAAT5D,KACAkI,EAAUK,IAAVL,MAEJjJ,EAASe,GACT,cAAC,EAAD,CAEIvB,MAAQ4D,EAAMrD,OAAOC,OACrBoO,KAAK,OACLC,iBAAkBA,GAHd,kBAORpO,EAAUc,GACV,oBAAIpB,UAAU,kBAAkBC,QAAS,kBAAI2O,EAAc,YAA3D,SACMnL,EAAMrD,OAAOE,UAInBC,GAAQa,GACR,cAAC,EAAD,CAEIvB,MAAQ4D,EAAMrD,OAAOG,KACrBkO,KAAK,QACLC,iBAAkBA,GAHd,iBAORlO,EAAS8I,GACT,oBAAItJ,UAAU,kBAAkBC,QAAS,kBAAI2O,EAAc,WAA3D,SACMnL,EAAMrD,OAAOI,SAInBC,GAAQW,GACR,cAAC,EAAD,CAEIvB,MAAQ4D,EAAMrD,OAAOK,KACrBgO,KAAK,OACLC,iBAAkBA,GAHd,gBAOZ,OACI,qBAAK1O,UAAU,UAAf,SACI,qBAAIA,UAAU,cAAd,UACMK,EACAC,EACAC,EACAC,EACAC,EACF,oBAAIT,UAAU,kBAAkBC,QAAS,kBAAI2O,EAAc,UAA3D,SACMnL,EAAMrD,OAAOM,YAEnB,oBAAIV,UAAU,kBAAkBC,QAAS,kBAAI+D,EAAqB,CAAEV,KAAMG,EAAMtD,YAAhF,SACMsD,EAAMrD,OAAOD,iBCrBpB4O,EAvCA,SAAC,GAAyD,IAAvDhP,EAAsD,EAAtDA,WAAYiP,EAA0C,EAA1CA,UAAWC,EAA+B,EAA/BA,aAAcnP,EAAiB,EAAjBA,WAG/CoP,EAAaF,EAAY,4BAA8B,2BAEvDG,EAAUH,GACV,cAAC,EAAD,CAEIN,iBASR,SAA0B9O,GACtBqP,GAAa,GACblP,EAAWH,GACXE,EAAW,YAXP8O,cAcR,SAAuBhP,GACnBqP,GAAa,GACbnP,EAAWF,KAlBH,WAqBZ,OACI,sBAAKsE,GAAG,SAASlE,UAAU,SAA3B,UACI,cAAC,EAAD,IACEmP,EACF,wBAAQnP,UAAU,YAAYC,QAAS,WAlB3CgP,GAAa,SAAA1G,GAAS,OAAKA,MAkBvB,SACI,mBAAGvI,UAAWkP,UCLfE,EA9BU,SAAC,GAAgB,IAAdzN,EAAa,EAAbA,OACxB,OACI,sBAAK3B,UAAU,mBAAf,UACI,mBAAGA,UAAU,2BAAb,SACM2B,EAAOuC,KAEb,sBAAKlE,UAAU,0BAAf,UACI,mBAAGA,UAAU,6BAAb,SACM2B,EAAOS,MAEb,mBAAGpC,UAAU,kCAAb,eAGA,mBAAGA,UAAU,6BAAb,SACM2B,EAAO4F,YAEb,mBAAGvH,UAAU,kCAAb,eAGA,mBAAGA,UAAU,6BAAb,SACM2B,EAAO6F,aAGjB,mBAAGxH,UAAU,4BAAb,SACM2B,EAAOC,cCsBVyN,EA1CO,WAAO,IAEjB5L,EAAUR,IAAVQ,MACArC,EAAS4D,IAAT5D,KAER,OACI,sBAAK8C,GAAG,gBAAgBlE,UAAU,gBAAlC,UACI,oBAAIA,UAAU,oBAAd,SACMyD,EAAMjD,OAAOoC,QAAQ/C,QAE3B,sBAAKG,UAAU,oBAAf,UACI,sBAAKA,UAAU,0BAAf,UACI,mBAAGA,UAAU,iDACb,mBAAGA,UAAU,6BAAb,SACMyD,EAAMjD,OAAOoC,QAAQjB,YAG/B,sBAAK3B,UAAU,0BAAf,UACI,mBAAGA,UAAU,iDACb,mBAAGA,UAAU,6BAAb,SACMyD,EAAMjD,OAAOoC,QAAQpC,YAG/B,sBAAKR,UAAU,0BAAf,UACI,mBAAGA,UAAU,kDACb,mBAAGA,UAAU,6BAAb,SACMyD,EAAMjD,OAAOoC,QAAQhB,gBAInC,qBAAK5B,UAAU,mBAAf,SACKoB,EAAKwB,QAAQgJ,KAAI,SAACjK,EAAQgF,GAAT,OACd,cAAC,EAAD,CAEIhF,OAAQA,GAFZ,2BAC6BgF,aCrBlC2I,EAhBQ,SAAC,GAAqB,IAAnBzP,EAAkB,EAAlBA,MAAOsM,EAAW,EAAXA,KAEzBoD,EAAwB,eAAV1P,GAA0B,IAE5C,OACI,sBAAKG,UAAU,iBAAf,UACI,mBAAGA,UAAU,wBAAb,SACMH,IAEN,oBAAGG,UAAU,uBAAb,UACMuP,EAAepD,SC2BlBqD,EAjCI,WAAO,IAEd/L,EAAUR,IAAVQ,MACArC,EAAS4D,IAAT5D,KAIR,OACI,sBAAK8C,GAAG,aAAalE,UAAU,aAA/B,UACI,oBAAIA,UAAU,iBAAd,SACMyD,EAAMjD,OAAOY,KAAKvB,QAExB,sBAAKG,UAAU,gBAAf,UACI,cAAC,EAAD,CAEIH,MAAQ4D,EAAMjD,OAAOY,KAAKqB,UAC1B0J,KAAM/K,EAAKS,MAFP,uBAIR,cAAC,EAAD,CAEIhC,MAAQ4D,EAAMjD,OAAOY,KAAKsB,aAC1ByJ,KAAM/K,EAAKwB,QAAQuF,QAFf,0BAIR,cAAC,EAAD,CAEItI,MAAQ4D,EAAMjD,OAAOY,KAAKuB,eAC1BwJ,KAAM/K,EAAKsG,YAAYS,QAFnB,+BCsBTsH,EA/CM,SAAC,GAA8C,IAA5C1P,EAA2C,EAA3CA,WAAYD,EAA+B,EAA/BA,WAAYmP,EAAmB,EAAnBA,aAEpCxL,EAAUR,IAAVQ,MACAlB,EAAcoH,IAAdpH,UACAjC,EAAYsJ,IAAZtJ,QAEJoP,EAAenN,GACf,yBAAQvC,UAAU,oBAAoBC,QAAS,kBAS/CH,EAAW,gBACXmP,GAAa,IAVb,UACI,mBAAGjP,UAAU,yCACb,mBAAGA,UAAU,uBAAb,SACMyD,EAAMnD,QAAQD,YAwB5B,OACI,sBAAK6D,GAAG,eAAelE,UAAU,eAAjC,UACM0P,EACF,yBAAQ1P,UAAU,oBAAoBC,QAAS,WAf/CsC,GACAzC,EAAW,WACXmP,GAAa,KAGblP,EAAW,QACXD,EAAW,WACXmP,GAAa,GACb3O,MAOA,UACI,mBAAGN,UAAU,sCACb,mBAAGA,UAAU,uBAAb,SACMyD,EAAMnD,QAAQA,iBC1BrBqP,EAdA,SAAC,GAA8C,IAA5C5P,EAA2C,EAA3CA,WAAYD,EAA+B,EAA/BA,WAAYmP,EAAmB,EAAnBA,aACtC,OACI,sBAAK/K,GAAG,SAASlE,UAAU,SAA3B,UACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,CACID,WAAYA,EACZD,WAAYA,EACZmP,aAAcA,QC+BfW,EAxCC,SAAC,GAA8C,IAA5C7P,EAA2C,EAA3CA,WAAYD,EAA+B,EAA/BA,WAAYmP,EAAmB,EAAnBA,aAE/BxL,EAAUR,IAAVQ,MACAnD,EAAYsJ,IAAZtJ,QAcR,OACI,sBAAK4D,GAAG,UAAUlE,UAAU,UAA5B,UACI,oBAAIA,UAAU,cAAd,SACMyD,EAAMnD,QAAQT,QAEpB,sBAAKG,UAAU,iBAAf,UACI,yBAAQA,UAAU,sBAAsBC,QAAS,kBAjBzDH,EAAW,gBACXmP,GAAa,IAgBL,UACI,mBAAGjP,UAAU,2CACb,mBAAGA,UAAU,yBAAb,SACMyD,EAAMnD,QAAQD,YAGxB,yBAAQL,UAAU,sBAAsBC,QAAS,kBAlBzDF,EAAW,QACXD,EAAW,WACXmP,GAAa,QACb3O,KAeQ,UACI,mBAAGN,UAAU,iDACb,mBAAGA,UAAU,yBAAb,SACMyD,EAAMnD,QAAQA,oBCpC3BuP,GAAY,CACrB,CACI,wFAEJ,CACI,6IACA,6BACA,sEAEJ,CACI,kFAEJ,CACI,mGACA,0GAEJ,CACI,yDACA,0GAEJ,CACI,2HACA,+FAIKC,GAAY,CACrB,CAAC,6CAGD,CACI,kEACA,yBACA,sCAEJ,CAAC,wCAGD,CAAC,mIAGD,CACI,2IAEJ,CAAC,sKCpBUC,GAtBG,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aAEnBC,EAAsBD,GAAgBA,EAAarE,KAAI,SAAClH,EAAMiC,GAAP,OACvD,mBAA8B3G,UAAU,oBAAxC,SACM0E,GADN,gBAAiBsL,EAAjB,YAAyBrJ,OAO7B,OAFAwJ,QAAQC,IAAIF,GAGR,sBAAKlQ,UAAU,YAAf,UACI,mBAAGA,UAAU,kBAAb,SACMgQ,IAEN,qBAAKhQ,UAAU,iBAAf,SACMkQ,QCmBHG,GA/BD,WAAO,IAAD,EAEQpN,IAAhBK,EAFQ,EAERA,KAAMG,EAFE,EAEFA,MAOV6M,EALoB,CACpB3M,GAAImM,GACJlM,GAAIiM,IAG6BvM,GAAMsI,KAAI,SAAClH,EAAMiC,GAAP,OAC3C,cAAC,GAAD,CAEIqJ,KAAOrJ,EAAI,EACXsJ,aAAevL,GAHnB,oBACsBiC,OAM1B,OACI,qBAAKzC,GAAG,QAAQlE,UAAU,UAA1B,SACI,sBAAKA,UAAU,uBAAf,UACI,oBAAIA,UAAU,YAAd,SACMyD,EAAMZ,MAAMhD,QAElB,qBAAKG,UAAU,eAAf,SACEsQ,UClBHC,GAVC,WACZ,OACI,qBAAKrM,GAAG,UAAUlE,UAAU,UAA5B,SACI,qBAAKA,UAAU,iBAAf,wBC6DGwQ,OAxDf,WAAgB,IAAD,EAEmBnN,mBAAS,WAF5B,mBAEJoN,EAFI,KAEK3Q,EAFL,OAGuBuD,oBAAS,GAHhC,mBAGJ2L,EAHI,KAGOC,EAHP,OAI2B5L,mBAAS,QAJpC,mBAIJgL,EAJI,KAISqC,EAJT,KAMX,SAAS3Q,EAAWH,GAChB8Q,EAAe9Q,GAGnB,IAAM+Q,EAAW,CACbnQ,OACI,cAAC,EAAD,CAEIT,WAAYA,EACZkP,aAAcA,EACdnP,WAAYA,GAHR,UAMZ8Q,QACI,cAAC,EAAD,CAEI7Q,WAAYA,EACZkP,aAAcA,EACdnP,WAAYA,GAHR,UAMZ+C,MACI,cAAC,GAAD,IAEJgO,QACI,cAAC,GAAD,IAEJC,QAAS,IAGb,OACI,sBAAK9Q,UAAU,MAAf,UACM2Q,EAASF,GACX,cAAC,EAAD,CAEI1Q,WAAYA,EACZiP,UAAWA,EACXC,aAAcA,EACdnP,WAAYA,GAJR,UAMR,cAAC,EAAD,CAEIuO,YAAaA,EACbtO,WAAYA,EACZD,WAAYA,GAHR,eChDpBiR,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,GAAD,YAKRC,SAASC,eAAe,W","file":"static/js/main.02ced17d.chunk.js","sourcesContent":["import React from 'react'\n\nconst HomeBtn = ({ icon, page, title, setTopPage, changePage }) => {\n    \n    function handleClick() {\n        if (page === \"howto\") {\n            setTopPage(\"howto\");\n        } else {\n            changePage(page);\n        }\n    }\n\n    return (\n        <div className=\"homeBtn\" onClick={()=>handleClick()}>\n            <i className={`homeBtn__i ${icon}`} />\n            <p className=\"homeBtn__p\">{ title }</p>\n        </div>\n    )\n}\n\nexport default HomeBtn;\n","export const INSTRUCTIONS = {\n    language: \"HK\",\n    navbar: {\n        resume: \"RESUME\",\n        endGame: \"END GAME\",\n        play: \"PLAY\",\n        result: \"RESULT\",\n        home: \"HOME\",\n        howToPlay: \"HOW TO PLAY\",\n        language: \"中文\",\n    },\n    home: {\n        homeBtns: {\n            playNow: \"PLAY NOW\",\n            howToPlay: \"HOW TO PLAY\"\n        }\n    },\n    setup: {\n        gameSetup: \"GAME SETUP\",\n        startGame: \"START GAME\",\n        numberOfPlayers: \"NUMBER OF PLAYERS\",\n        numberOfCardsets: \"NUMBER OF CARDSETS\",\n        initialBalance: \"INITIAL BALANCE\",\n        initialPool: \"INITIAL POOL\"\n    },\n    game: {\n        gameWoodWorks: {\n            title: \"WOODWORKS\",\n            get: \"GET\"\n        },\n        gameBall: {\n            title: \"BALL\",\n            get: \"GET\",\n            afterPlacingBet: \"You can get ball after placing bet.\"\n        },\n        gamePanel: {\n            info: {\n                player: \"PLAYER\",\n                balance: \"BALANCE\",\n                pool: \"POOL\",\n                cards: \"CARDS\"\n            },\n            control: {\n                woodworks: \"CLICK TO GET WOODWORKS\",\n                bet: \"BET\",\n                ball: \"CLICK TO GET BALL\",\n                result: {\n                    results: {\n                        win: \"WIN\",\n                        lose: \"LOSE\",\n                        loseDouble: \"LOSE (DOUBLE)\"\n                    },\n                    nextRound: \"Next round\",\n                    seeResult: \"See result\",\n                }\n            }\n        }\n    },\n    endGame: {\n        title: \"END GAME?\",\n        resume: \"RESUME\",\n        endGame: \"END GAME\"\n    },\n    result: {\n        game: {\n            title: \"GAME STATS\",\n            totalPool: \"TOTAL POOL\",\n            totalPlayers: \"TOTAL PLAYERS\",\n            remainingCards: \"REMAINING CARDS\"\n        },\n        players: {\n            title: \"PLAYERS\",\n            player: \"PLAYER\",\n            result: \"W : L : Lx2\",\n            balance: \"BALANCE\"\n        }\n    },\n    howto: {\n        title: \"HOW TO PLAY\"\n    }\n}","export const INSTRUCTIONS = {\n    language: \"EN\",\n    navbar: {\n        resume: \"繼續\",\n        endGame: \"完場\",\n        play: \"開始\",\n        result: \"睇結果\",\n        home: \"主頁\",\n        howToPlay: \"玩法\",\n        language: \"英文\",\n    },\n    home: {\n        homeBtns: {\n            playNow: \"開始\",\n            howToPlay: \"玩法\"\n        }\n    },\n    setup: {\n        gameSetup: \"設定遊戲\",\n        startGame: \"開結遊戲\",\n        numberOfPlayers: \"玩家數目\",\n        numberOfCardsets: \"幾多副牌？\",\n        initialBalance: \"初始資金\",\n        initialPool: \"初始彩池\"\n    },\n    game: {\n        gameWoodWorks: {\n            title: \"門柱\",\n            get: \"拎牌\"\n        },\n        gameBall: {\n            title: \"波\",\n            get: \"拎牌\",\n            afterPlacingBet: \"攞左門柱先可以落注.\"\n        },\n        gamePanel: {\n            info: {\n                player: \"玩家\",\n                balance: \"戶口\",\n                pool: \"彩池\",\n                cards: \"餘下卡量\"\n            },\n            control: {\n                woodworks: \"按 [拎牌] 拎門柱卡\",\n                bet: \"落注\",\n                ball: \"按 [拎牌] 拎波卡\",\n                result: {\n                    results: {\n                        win: \"贏\",\n                        lose: \"輸\",\n                        loseDouble: \"輸DOUBLE\"\n                    },\n                    nextRound: \"繼續\",\n                    seeResult: \"睇結果\",\n                }\n            }\n        }\n    },\n    endGame: {\n        title: \"完場?\",\n        resume: \"繼續\",\n        endGame: \"完場\"\n    },\n    result: {\n        game: {\n            title: \"遊戲數據\",\n            totalPool: \"總彩池\",\n            totalPlayers: \"玩家\",\n            remainingCards: \"餘下卡量\"\n        },\n        players: {\n            title: \"玩家表現\",\n            player: \"玩家\",\n            result: \"贏 : 輸 : 輸Double\",\n            balance: \"戶口\"\n        }\n    },\n    howto: {\n        title: \"玩法\"\n    }\n}","import React, { useContext, useState } from \"react\";\nimport { INSTRUCTIONS as TEXT_EN } from \"../data/instructions_EN\";\nimport { INSTRUCTIONS as TEXT_HK } from \"../data/instructions_HK\";\n\nconst LangContext = React.createContext();\n\nexport function useLang() {\n    return useContext(LangContext);\n}\n\nexport const LangProvider = ({ children }) => {\n\n    const [lang, setLang] = useState(\"EN\");\n    const [texts, setTexts] = useState(TEXT_EN);\n\n    const INSTRUCTIONS = {\n        EN: TEXT_EN,\n        HK: TEXT_HK,\n    }\n\n    function handleChangeLanguage({ lang }) {\n        setLang(lang);\n        setTexts(INSTRUCTIONS[lang]);\n    }\n\n    return(\n        <LangContext.Provider value={{ texts, lang, handleChangeLanguage }}>\n            { children }\n        </LangContext.Provider>\n    )\n}","import React from 'react'\nimport HomeBtn from './HomeBtn';\n\nimport { useLang } from \"../../context/LangContext\";\n\nconst Home = ({ changePage, setTopPage }) => {\n\n    const { texts } = useLang();\n\n    return (\n        <div id=\"home\" className=\"home\">\n            <HomeBtn\n                key=\"homebtn-play\"\n                page=\"setup\"\n                icon=\"fas fa-chevron-right\"\n                title={texts && texts.home.homeBtns.playNow}\n                changePage={changePage}\n            />\n            <HomeBtn\n                key=\"homebtn-icon\"\n                page=\"howto\"\n                icon=\"fas fa-info\"\n                title={texts && texts.home.homeBtns.howToPlay}\n                changePage={changePage}\n                setTopPage={setTopPage}\n            />\n        </div>\n    )\n}\n\nexport default Home;","export const SETUP_GAME_FORM = [\n    {\n        label: \"NUMBER OF PLAYERS\",\n        name: \"numberOfPlayers\",\n        min: 2,\n        max: 15,\n        defaultValue: 2,\n    },\n    {\n        label: \"NUMBER OF CARDSETS\",\n        name: \"numberOfCardsets\",\n        min: 1,\n        max: 100000,\n        defaultValue: 1,\n    },\n    {\n        label: \"INITIAL BALACE\",\n        name: \"initialBalance\",\n        min: 10,\n        max: 1000000,\n        defaultValue: 10,\n    },\n    {\n        label: \"INITIAL POOL\",\n        name: \"initialPool\",\n        min: 1,\n        max: 1000000,\n        defaultValue: 1,\n    }\n]","import React from 'react'\n\nconst SetupGrp = ({ label, item: { name, min, max, defaultValue } }) => {\n    \n    return (\n        <div className=\"setupGrp\">\n            <label htmlFor={`setupGrp_${name}`} className=\"setupGrp__label\">\n                { label }\n            </label>\n            <input\n                id={`setupGrp_${name}`}\n                className=\"setupGrp__input\"\n                name={name}\n                type=\"number\"\n                min={min}\n                max={max}\n                defaultValue={defaultValue}\n                required\n            />\n        </div>\n    )\n}\n\nexport default SetupGrp;","import React, { useContext, useState } from \"react\";\n\nconst GameContext = React.createContext();\nconst GameFunctionsContext = React.createContext();\n\nexport function useGame() {\n    return useContext(GameContext);\n}\n\nexport function useGameFunctions() {\n    return useContext(GameFunctionsContext);\n}\n\nexport const GameProvider = ({ children }) => {\n\n    const GAME = {\n        numberOfPlayers: 0,\n        numberOfCardsets: 0,\n        initialPool: 0,\n        pool: 0,\n        cardReserve: [],\n        usedCards: [],\n        players: [],\n        gameHistory: [],\n        currentPlayerID: 0\n    }\n\n    const [game, setGame] = useState(null);\n    const [isGameOver, setIsGameOver] = useState(false);\n\n    // Generate Player\n    function generatePlayer({ numberOfPlayers, initialBalance }) {\n        // Take { numberOfPlayers } as argument, generate and return numberOfPlayers of players.\n\n        const PLAYERS = [];\n\n        for (let i = 0; i < numberOfPlayers; i++) {\n            PLAYERS.push({\n                id: i,\n                balance: Number(initialBalance),\n                isActive: true,\n                win: 0,\n                loseSmall: 0,\n                loseBig: 0\n            })\n        }\n\n        return PLAYERS\n    }\n\n    // Generate Cards\n    function generateCards({ numberOfCardsets }) {\n        // Take { numberOfCardsets } as argument, generate and return numberOfCardsets of card sets.\n\n        const CARD_SCHEME = {\n            spade: \"♠\",\n            heart: \"♥\",\n            club: \"♣\",\n            diamond: \"♦\",\n        }\n\n        const CARD_NUMBER = {\n            1: \"A\",\n            2: \"2\",\n            3: \"3\",\n            4: \"4\",\n            5: \"5\",\n            6: \"6\",\n            7: \"7\",\n            8: \"8\",\n            9: \"9\",\n            10: \"10\",\n            11: \"J\",\n            12: \"Q\",\n            13: \"K\",\n        }\n\n        const CARDS = [];\n\n        let id = 0;\n\n        for (let i = 0; i < numberOfCardsets; i++) {\n            for (const SCHEME in CARD_SCHEME) {\n                for (let j = 1; j < 14; j++) {\n                    CARDS.push({\n                        id,\n                        number: CARD_NUMBER[j],\n                        scheme: SCHEME,\n                        symbol: CARD_SCHEME[SCHEME],\n                        value: j\n                    })\n                    id++;\n                }\n            }\n        }\n        return CARDS;\n    }\n\n    // setupGame\n    function setupGame({ numberOfPlayers, initialBalance, numberOfCardsets, initialPool }) {\n        /*\n        Generate players and cards\n        Calculate initial pool\n        Randomly pick starting player\n        return default state\n        */\n\n        // Generate players\n        let players = generatePlayer({ numberOfPlayers, initialBalance });\n\n        // Generate cards\n        let cardReserve = generateCards({ numberOfCardsets });\n\n        // Calculate initial pool\n        let pool = initialPool * numberOfPlayers;\n\n        // Randomly pick starting player\n        let currentPlayerID = Math.floor(Math.random() * numberOfPlayers);\n\n\n        let newGame = {\n            numberOfPlayers,\n            numberOfCardsets,\n            initialPool,\n            players,\n            cardReserve,\n            pool,\n            currentPlayerID,\n            usedCards: [],\n            gameHistory: [],\n        }\n\n        // Return initial state\n        setGame(newGame);\n\n        return newGame;\n    }\n\n    // Check Reserve\n    function checkReserve() {\n        /*\n        Check total cards in the cardReserve\n        return false if less than 3\n        Check total money left on the pool\n        return true if more than $0\n        return false if 0 or less than 0\n        */\n       \n        //Check total cards in the cardReserve, return false if less than 3\n        let totalCardsRemaining = game.cardReserve.length;\n        if (totalCardsRemaining < 3) return false;\n        return true;\n    }\n\n    // Check Valid Players\n    function checkValidPlayers() {\n        return game.players.some(player => player.isActive);\n    }\n\n    // Check Valid Round\n    function checkValidGame() {\n        if (checkReserve() && checkValidPlayers()) return true;\n        return false;\n    }\n\n    // Add cardsets to reserve\n    function addCardsets({ numberOfCardsets }) {\n        /*\n        Generate cardsets: cardGenerator\n        Add them to cardReserve\n        */\n\n        setGame(prevState => ({\n            ...prevState,\n            cardReserve: generateCards({ numberOfCardsets })\n        }))\n    }\n\n    // Get woodwork cards\n    function getCard() {\n        /*\n        Randomly pick 1 card from card reserves\n        Call removeFromReserve()\n        return 1 card\n        */\n        let remainingNumberOfCards = game.cardReserve.length;\n        let randomIndex = Math.floor(Math.random() * remainingNumberOfCards);\n        let card = game.cardReserve.splice(randomIndex, 1)[0];\n        \n        setGame(prevState => ({\n            ...prevState,\n            usedCards: [...prevState.usedCards, card]\n        }))\n\n        return card;\n    }\n\n    // Get 2 cards\n    function get2Cards() {\n        /*\n        Randomly pick 2 cards from card reserves\n        Call removeFromReserve()\n        sort cards\n        return 2 sorted cards in Array format\n        */\n        let cardReserve = game.cardReserve;\n        let remainingNumberOfCards = cardReserve.length;\n        let card1 = cardReserve.splice(Math.floor(Math.random() * remainingNumberOfCards), 1)[0];\n        let card2 = cardReserve.splice(Math.floor(Math.random() * remainingNumberOfCards - 1), 1)[0];\n\n        setGame(prevState => ({\n            ...prevState,\n            usedCards: [...prevState.usedCards, card1, card2]\n        }))\n\n        return [card1, card2].sort((a, b) => a.value - b.value);\n    }\n\n    // Update player\n    function updatePlayer({ player }) {\n        /*\n        Update player\n        */\n\n        let playerIndex = game.players.findIndex(item => item.id === player.id);\n        let newPlayers = game.players.slice();\n        newPlayers[playerIndex] = player;\n        setGame(prevState => ({\n            ...prevState,\n            players: newPlayers,\n        }))\n    }\n\n    // Update pool\n    function updatePool({ pool }) {\n        /*\n        Update player\n        */\n\n        setGame(prevState => ({\n            ...prevState,\n            pool\n        }))\n    }\n\n    // Update state\n    function updateGame({ round }) {\n        /*\n        Add round to game history\n        Update State\n        */\n        setGame(prevState => ({\n            ...prevState,\n            gameHistory: [...prevState.gameHistory, round],\n        }))\n    }\n    \n    // Game Over\n    function gameOver() {\n        setGame(null)\n        setIsGameOver(false);\n    }\n\n    return(\n        <GameContext.Provider value={{ game, isGameOver }}>\n            <GameFunctionsContext.Provider value={{\n                setupGame, setGame, getCard, get2Cards, gameOver, updatePlayer, updatePool, updateGame, checkValidGame\n            }}>\n                { children }\n            </GameFunctionsContext.Provider>\n        </GameContext.Provider>\n    )\n}","import React, { useContext, useState } from \"react\";\n\nimport { useGame, useGameFunctions } from \"./GameContext\";\n\nconst RoundContext = React.createContext();\nconst RoundFunctionsContext = React.createContext();\n\nexport function useRound() {\n    return useContext(RoundContext);\n}\n\nexport function useRoundFunctions() {\n    return useContext(RoundFunctionsContext);\n}\n\nexport const RoundProvider = ({ children }) => {\n\n    const { game } = useGame();\n    const { setGame, setupGame, getCard, get2Cards, gameOver, updatePlayer, updatePool, checkValidGame } = useGameFunctions();\n    const [round, setRound] = useState(()=>setupRound());\n    const [nextRound, setNextRound] = useState(false);\n\n    // Initial Round\n    function setupInitialRound({ numberOfPlayers, initialBalance, numberOfCardsets, initialPool }) {\n\n        let newGame = setupGame({ numberOfPlayers, initialBalance, numberOfCardsets, initialPool })\n\n        // Check whose turn it is\n        let player = checkTurn({ newGame });\n\n        // Return an empty round object\n        setRound({\n            stage: \"woodworks\",\n            player: player,\n            woodworks: [],\n            bet: 0,\n            ball: null,\n            result: \"\",\n        })\n\n        setNextRound(true);\n    }\n\n    // Setup Round\n    function setupRound() {\n\n        // If game hasn't start, set round to null\n        if (!game) return null;\n        \n        // Check whose turn it is\n        let player = checkTurn({});\n\n        // Return an empty round object\n        setRound({\n            stage: \"woodworks\",\n            player: player,\n            woodworks: [],\n            bet: 0,\n            ball: null,\n            result: \"\",\n        })\n\n        setNextRound(true);\n    }\n\n    // Check turn\n    function checkTurn({ newGame }) {\n        /*\n        Return which player is playing the game\n        */\n\n        let source = !newGame ? game : newGame;\n\n        let players = source.players;\n        let nextPlayerID = source.currentPlayerID;\n        let nextPlayerFound = false;\n        let counter = 0;\n        \n        while (!nextPlayerFound) {\n            nextPlayerID += 1;\n            counter += 1;\n            \n            if (nextPlayerID === players.length) nextPlayerID -= players.length;\n            \n            if (players[nextPlayerID].isActive) nextPlayerFound = true;\n            if (counter === players.length + 1) return false;\n        }\n        \n        // Update game's currentPlayerID\n        setGame(prevState => ({\n            ...prevState,\n            currentPlayerID: nextPlayerID\n        }))\n\n        return players[nextPlayerID];\n    }\n\n    // Get woodworks\n    function getWoodworks() {\n        /*\n        Get woodworks cards to kick start the round\n        */\n\n        // Get 2 cards from reserve\n        let woodworks = get2Cards();\n\n        // Store cards to round's woodworks and update round stage to let player place bet\n        setRound(prevRound => ({\n            ...prevRound,\n            woodworks\n        }))\n    }\n\n    // Place bet\n    function placeBet({ bet }) {\n        /*\n        After player placed bet, set round stage to ball to let player get ball\n        */\n\n        setRound(prevRound => ({\n            ...prevRound,\n            stage: \"ball\",\n            bet\n        }))\n    }\n\n    // Get ball\n    function getBall() {\n        /*\n        User to get the ball\n        */\n\n        // Get card from reserve\n        let ball = getCard();\n        // Store cards to round's woodworks and update round stage to let player place bet\n        setRound(prevRound => ({\n            ...prevRound,\n            ball\n        }))\n    }\n\n    // Get result\n    function getResult() {\n        /*\n        Get the result of the round\n        */\n\n        let player = round.player;\n        let minVal = round.woodworks[0].value;\n        let maxVal = round.woodworks[1].value;\n        let CardVal = round.ball.value;\n        let pool = Number(game.pool);\n        let playerBalance = Number(player.balance);\n        let bet = Number(round.bet);\n        let prize = 0;\n\n        let result = CardVal > minVal && CardVal < maxVal\n                        ? \"win\"\n                        : CardVal === minVal || CardVal === maxVal\n                            ? \"loseBig\"\n                            : \"loseSmall\"\n\n        /*\n        Check the value of the ball\n        return \"win\", \"loseSmall\" or \"loseBig\"\n        */\n\n        // Adjust player's balance\n        switch (result) {\n            case \"win\":\n                playerBalance += bet;\n                pool -= bet;\n                prize = bet;\n                break;\n            case \"loseSmall\":\n                playerBalance -= bet;\n                pool += bet;\n                prize -= bet;\n                break;\n            case \"loseBig\":\n                playerBalance -= (bet * 2);\n                pool += (bet * 2);\n                prize -= (bet * 2);\n                break;\n            default:\n                break;\n        }\n\n        \n        // Update player's balance\n        player.balance = playerBalance;\n\n        // Check if player is still active\n        player.isActive = playerBalance > 0;\n\n        // Update player's stat\n        player[result]++;\n\n        // Update player\n        updatePlayer({ player });\n\n        // Update pool\n        updatePool({ pool })\n        \n        // Check pool\n        let hasNextRound = checkValidGame() && pool > 0;\n        \n        let roundResult = {\n            result, prize\n        };\n\n        setRound(prevState => ({\n            ...prevState,\n            stage: \"result\",\n            result: roundResult\n        }))\n\n        // Push previous round to game history\n        setGame(prevGame => ({\n            ...prevGame,\n            history: [...prevGame.gameHistory, roundResult]\n        }))\n\n        setNextRound(hasNextRound);\n\n        return roundResult;\n\n    }\n\n    function endRound() {\n        /*\n        reset round\n        */\n\n        // reset round\n        setupRound();\n    }\n\n    function endGame() {\n        /*\n        see final result\n        */\n\n        // reset round\n        setRound(null);\n        setNextRound(false);\n\n        // set game over\n        gameOver();\n    }\n\n\n    return(\n        <RoundContext.Provider value={{ round, nextRound }}>\n            <RoundFunctionsContext.Provider value={{\n                setRound, setupRound, setupInitialRound,\n                getWoodworks, placeBet, getBall, getResult, endRound, endGame\n            }}>\n                { children }\n            </RoundFunctionsContext.Provider>\n        </RoundContext.Provider>\n    )\n}","import React, { useRef } from 'react'\n\nimport { SETUP_GAME_FORM } from \"../../data/setupData\";\nimport SetupGrp from './SetupGrp';\n\nimport { useLang } from \"../../context/LangContext\";\nimport { useRoundFunctions } from \"../../context/RoundContext\";\n\nexport const SetupForm = ({ createGame, changePage }) => {\n\n    const { setupRound } = useRoundFunctions();\n    const { texts } = useLang();\n\n    let formRef = useRef();\n\n    let formItems = SETUP_GAME_FORM.map((item, i) => (\n        <SetupGrp\n            key={`setupgrp-${i}`}\n            label={ texts.setup[item.name] }\n            item={item}\n        />\n    ))\n\n    function handleSubmit(event) {\n        event.preventDefault();\n        const FORM = formRef.current;\n        //createGame({ numberOfPlayers, initialBalance, numberOfCardsets, initialPool });\n\n        let data = {};\n        SETUP_GAME_FORM.forEach(item => {\n            data[item.name] = FORM[item.name].value;\n        })\n        \n        createGame(data);\n        changePage(\"game\");\n    }\n\n    return (\n        <form className=\"setupForm\" ref={formRef} onSubmit={(event)=>handleSubmit(event)}>\n            <h1 className=\"setupForm__h1\">\n                { texts.setup.gameSetup }\n            </h1>\n            { formItems }\n            <button className=\"setupForm__btn\">\n                { texts.setup.startGame }\n            </button>\n        </form>\n    )\n}\n\nexport default SetupForm;","import React from 'react'\nimport SetupForm from './SetupForm'\n\nimport { useGame, useGameFunctions } from \"../../context/GameContext\";\nimport { useRoundFunctions } from \"../../context/RoundContext\";\n\nconst Setup = ({ changePage }) => {\n\n    const { setupGame } = useGameFunctions();\n    const { setupInitialRound } = useRoundFunctions();\n\n    function createGame({ numberOfPlayers, initialBalance, numberOfCardsets, initialPool }) {\n        setupInitialRound({ numberOfPlayers, initialBalance, numberOfCardsets, initialPool });\n    }\n\n    return (\n        <div id=\"setup\" className=\"setup\">\n            <SetupForm\n                key=\"setupform\"\n                createGame={createGame}\n                changePage={changePage}\n            />\n        </div>\n    )\n}\n\nexport default Setup;","import React, {useState } from 'react'\n\nexport const GameCard = ({ card, handleCardClick, value }) => {\n    \n    const [cardClicked, setCardClicked] = useState(false);\n\n    const CARD_SCHEME = {\n        spade: \"bi bi-suit-spade-fill\",\n        heart: \"bi bi-suit-heart-fill\",\n        club: \"bi bi-suit-club-fill\",\n        diamond: \"bi bi-suit-diamond-fill\"\n    }\n\n    let gameCardDivClass = (card && (card.scheme === \"heart\" || card.scheme === \"diamond\")) && \"gameCard__div--pink\";\n\n    let display = cardClicked\n        ? (\n            <div className={`gameCard__div ${gameCardDivClass}`}>\n                <div className=\"gameCard__div__div\">\n                    <p className=\"gameCard__div__div__p\">{ card.number }</p>\n                </div>\n                <i className={`gameCard__div__i ${CARD_SCHEME[card.scheme]}`}></i>\n            </div>\n        )\n        : (\n            <i className=\"gameCard__i fas fa-question\"></i>\n        )\n\n    function handleClick({ value }) {\n        handleCardClick({ value });\n        setCardClicked(true);\n    }\n\n    return (\n        <div \n            className=\"gameCard\"\n            onClick={()=>handleClick({ value })}\n        >\n            { display }\n        </div>\n    )\n}\n\nexport default GameCard;\n","import React, { useEffect, useState } from 'react'\nimport GameCard from './GameCard';\n\nimport { useLang } from \"../../context/LangContext\";\nimport { useRound, useRoundFunctions } from \"../../context/RoundContext\";\n\nconst GameBall = ({ stage }) => {\n\n    const { texts } = useLang();\n    const { round } = useRound();\n    const { getBall, getResult } = useRoundFunctions();\n    const [clicked, setClicked] = useState(false);\n\n    useEffect(() => {\n        if (!round.ball) setClicked(false);\n    })\n\n    function handleCardClick() {\n        if (!clicked) getResult();\n        setClicked(true);\n    }\n\n    let readyToGetCard = round.ball\n        ? (\n            <div className=\"gameBall__card\">\n                <GameCard\n                    key=\"gameball\"\n                    card={round.ball}\n                    handleCardClick={handleCardClick}\n                    value=\"ball\"\n                />\n            </div>\n        )\n        : (\n            <div className=\"gameBall__card\">\n                <button className=\"gameBall__card__btn\" onClick={()=>getBall()}>\n                    <i className=\"gameBall__card__btn__i fas fa-hand-point-up\" />\n                    <p className=\"gameBall__card__btn__p\">\n                        { texts.game.gameBall.get }\n                    </p>\n                </button>\n            </div>\n        )\n\n    let display = {\n        woodworks: (\n            <div className=\"gameBall__card\">\n                <p className=\"gameBall__card__p\">\n                    { texts.game.gameBall.afterPlacingBet }\n                </p>\n            </div>\n        ),\n        bet: (\n            <div className=\"gameBall__card\">\n                <p className=\"gameBall__card__p\">\n                    { texts.game.gameBall.afterPlacingBet }\n                </p>\n            </div>\n        ),\n        ball: readyToGetCard,\n        result: (\n            <div className=\"gameBall__card\">\n                <GameCard\n                    key=\"gameball\"\n                    card={round.ball}\n                    handleCardClick={handleCardClick}\n                    value=\"ball\"\n                />\n            </div>\n        )\n    }\n    \n    return (\n        <div id=\"gameBall\" className=\"gameBall\">\n            <p className=\"gameBall__p\">\n                { texts.game.gameBall.title }\n            </p>\n            { display[stage] }\n        </div>\n    )\n}\n\nexport default GameBall;","import React, { useRef } from 'react';\n\nimport { useLang } from \"../../context/LangContext\";\nimport { useGame } from \"../../context/GameContext\";\nimport { useRound } from \"../../context/RoundContext\";\nimport { useRoundFunctions } from \"../../context/RoundContext\";\n\nconst GamePanelBet = () => {\n\n    const { texts } = useLang();\n    const { game } = useGame();\n    const { round } = useRound();\n    const { placeBet } = useRoundFunctions();\n\n    let betRef = useRef();\n\n    const MAX_BET = round.player.balance > game.pool ? game.pool : round.player.balance;\n\n    function handleSubmit(event) {\n        event.preventDefault();\n        let bet = betRef.current.value;\n        placeBet({ bet });\n    }\n\n    return (\n        <form id=\"gamePanelBet\" className=\"gamePanelBet\" onSubmit={(event)=>handleSubmit(event)}>\n            <input \n                id=\"gamePanelBet__input\"\n                className=\"gamePanelBet__input\" \n                name=\"bet\"\n                type=\"number\"\n                min={1}\n                max={MAX_BET}\n                defaultValue={1}\n                required\n                ref={betRef}\n            />\n            <button type=\"submit\" className=\"gamePanelBet__btn\">{ texts.game.gamePanel.control.bet }</button>\n        </form>\n    )\n}\n\nexport default GamePanelBet;","import React from 'react';\n\nimport { useLang } from \"../../context/LangContext\";\nimport { useRound, useRoundFunctions } from \"../../context/RoundContext\"; \n\nconst GamePanelResult = ({ setTopPage }) => {\n\n    const { texts } = useLang();\n    const { round, nextRound } = useRound();\n    const { endRound } = useRoundFunctions();\n\n    let result = round.result.result === \"win\"\n        ? texts.game.gamePanel.control.result.results.win\n        : round.result.result === \"loseSmall\"\n            ? texts.game.gamePanel.control.result.results.lose\n            : texts.game.gamePanel.control.result.results.loseDouble;\n\n    let resultClass = round.result.result === \"win\"\n        ? \"gamePanelResult__div--win\"\n        : \"gamePanelResult__div--lose\"\n\n    function handleClick() {\n        if (nextRound) {\n            endRound();\n        } else {\n            setTopPage(\"result\");\n        }\n    }\n\n    return (\n        <div id=\"gamePanelResult\" className=\"gamePanelResult\">\n            <div id=\"gamePanelResult__div\" className={`gamePanelResult__div ${resultClass}`}>\n                <p className=\"gamePanelResult__div__p\">\n                    { result }\n                </p>\n                <p className=\"gamePanelResult__div__data\">\n                    ${round.result.prize}\n                </p>\n            </div>\n            <button className=\"gamePanelResult__btn\" onClick={()=>handleClick()}>\n                {nextRound ? texts.game.gamePanel.control.result.nextRound : texts.game.gamePanel.control.result.seeResult }\n            </button>\n        </div>\n    )\n}\n\nexport default GamePanelResult;","import React from 'react'\nimport GamePanelBet from './GamePanelBet'\nimport GamePanelResult from './GamePanelResult'\n\nimport { useLang } from \"../../context/LangContext\";\nimport { useRound } from \"../../context/RoundContext\";\n\nconst GamePanelControl = ({ changePage, setTopPage }) => {\n\n    const { texts } = useLang();\n    const { round } = useRound();\n\n    let display = {\n        woodworks: (\n            <div className=\"gamePanelControl__step\">\n                <p className=\"gamePanelControl__step__number\">1</p>\n                <p className=\"gamePanelControl__step__p\">{ texts.game.gamePanel.control.woodworks }</p>\n            </div>\n        ),\n        bet: (\n            <div className=\"gamePanelControl__step\">\n                <p className=\"gamePanelControl__step__number\">2</p>\n                <GamePanelBet\n                    key=\"gamepanelbet\"\n                />\n            </div>\n        ),\n        ball: (\n            <div className=\"gamePanelControl__step\">\n                <p className=\"gamePanelControl__step__number\">3</p>\n                <p className=\"gamePanelControl__step__p\">{ texts.game.gamePanel.control.ball }</p>\n            </div>\n        ),\n        result: (\n                <GamePanelResult \n                    changePage={changePage}\n                    setTopPage={setTopPage}\n                />\n        )\n    }\n\n    return (\n        <div className=\"gamePanelControl\">\n            { display[round.stage] }\n        </div>\n    )\n}\n\nexport default GamePanelControl;","import React from 'react';\n\nimport { useLang } from \"../../context/LangContext\";\nimport { useGame } from \"../../context/GameContext\";\nimport { useRound } from \"../../context/RoundContext\";\n\nconst GamePanelInfoGrp = ({ title, data }) => {\n\n    let symbol = (title === \"BALANCE\" || title === \"POOL\") && \"$\";\n    let playerClass = title === \"PLAYER\" && \"gamePanelInfoGrp__data--player\";\n\n    return (\n        <div className=\"gamePanelInfoGrp\">\n            <p className=\"gamePanelInfoGrp__title\">{ title }</p>\n            <p className={`gamePanelInfoGrp__data ${playerClass}`}>{ symbol }{ data }</p>\n        </div>\n    )\n}\n\nconst GamePanelInfo = () => {\n\n    const { texts } = useLang();\n    const { game } = useGame();\n    const { round } = useRound();\n\n    return (\n        <div className=\"gamePanelInfo\">\n            <GamePanelInfoGrp\n                key=\"gamePanelInfoGrp-player\"\n                title={ texts.game.gamePanel.info.player }\n                data={round.player.id}\n            />\n            <GamePanelInfoGrp\n                key=\"gamePanelInfoGrp-balance\"\n                title={ texts.game.gamePanel.info.balance }\n                data={round.player.balance}\n            />\n            <GamePanelInfoGrp\n                key=\"gamePanelInfoGrp-pool\"\n                title={ texts.game.gamePanel.info.pool }\n                data={game.pool}\n            />\n            <GamePanelInfoGrp\n                key=\"gamePanelInfoGrp-cards\"\n                title={ texts.game.gamePanel.info.cards }\n                data={game.cardReserve.length}\n            />\n        </div>\n    )\n}\n\nexport default GamePanelInfo;\n","import React from 'react'\nimport GamePanelControl from './GamePanelControl'\nimport GamePanelInfo from './GamePanelInfo'\n\nconst GamePanel = ({ changePage, setTopPage }) => {\n    return (\n        <div id=\"gamePanel\" className=\"gamePanel\">\n            <GamePanelInfo\n                key=\"gamepanelinfo\"\n            />\n            <GamePanelControl\n                key=\"gamepanelControl\"\n                changePage={changePage}\n                setTopPage={setTopPage}\n            />\n        </div>\n    )\n}\n\nexport default GamePanel;","import React, { useEffect, useState } from 'react'\nimport GameCard from './GameCard';\n\nimport { useLang } from \"../../context/LangContext\";\nimport { useRound, useRoundFunctions } from \"../../context/RoundContext\";\n\n\nconst GameWoodWorks = () => {\n\n    const { texts } = useLang();\n    const { round } = useRound();\n    const { setRound, getWoodworks } = useRoundFunctions();\n    const [clicked, setClicked] = useState(new Set);\n    const [disabled, setDisabled] = useState(false);\n\n    useEffect(() => {\n        setNewClicked();\n    }, [round])\n\n    function setNewClicked() {        \n        if (round.woodworks.length === 0) {\n            setClicked(new Set());\n            setDisabled(false);\n        }\n    }\n\n    function handleCardClick({ value }) {\n        clicked.add(value);\n        setClicked(clicked);\n\n        if (clicked.size === 2 && !disabled) {\n            setRound(prevState => ({\n                ...prevState,\n                stage: \"bet\"\n            }))\n            setDisabled(true);\n        }\n    }\n\n    let display = round.woodworks.length > 0\n        ? (\n            <div className=\"gameWoodWorks__cards\">\n                <GameCard\n                    key=\"woodwork-min\"\n                    card={round.woodworks[0]}\n                    handleCardClick={handleCardClick}\n                    value=\"min\"\n                />\n                <GameCard\n                    key=\"woodwork-max\"\n                    card={round.woodworks[1]}\n                    handleCardClick={handleCardClick}\n                    value=\"max\"\n                />\n            </div>\n        )\n        : (\n            <div className=\"gameWoodWorks__cards\">\n                <button className=\"gameWoodWorks__cards__btn\" onClick={()=>getWoodworks()}>\n                    <i className=\"gameWoodWorks__cards__btn__i fas fa-hand-point-up\" />\n                    <p className=\"gameWoodWorks__cards__btn__p\">\n                        { texts.game.gameWoodWorks.get }\n                    </p>\n                </button>\n            </div>\n        )\n\n    return (\n        <div id=\"gameWoodWorks\" className=\"gameWoodWorks\">\n            <p className=\"gameWoodWorks__p\">\n                { texts.game.gameWoodWorks.title }\n            </p>\n            { display }\n        </div>\n    )\n}\n\nexport default GameWoodWorks;","import React from 'react'\nimport GameBall from './GameBall';\nimport GamePanel from './GamePanel'\nimport GameWoodWorks from './GameWoodWorks';\n\nimport { useRound } from \"../../context/RoundContext\";\n\nconst Game = ({ changePage, setTopPage }) => {\n\n    const { round } = useRound();\n\n    return (\n        <div id=\"game\" className=\"game\">\n            <GameWoodWorks />\n            <GameBall \n                key=\"gameball\"\n                stage={round.stage}\n            />\n            <GamePanel \n                stage={round.stage}\n                changePage={changePage}\n                setTopPage={setTopPage}\n            />\n        </div>\n    )\n}\n\nexport default Game;","import React from 'react'\n\nimport Home from \"../home/Home\";\nimport Setup from \"../setup/Setup\";\nimport Game from \"../game/Game\";\n\nconst Content = ({ currentPage, changePage, setTopPage }) => {\n\n    const PAGE = {\n        home: (\n            <Home \n                changePage={changePage}\n                setTopPage={setTopPage}\n            />\n        ),\n        setup: (\n            <Setup \n                changePage={changePage}\n            />\n        ),\n        game: (\n            <Game \n                changePage={changePage}\n                setTopPage={setTopPage}\n            />\n        )\n    }\n\n    return (\n        <div id=\"content\" className=\"content\">\n            { PAGE[currentPage] }\n        </div>\n    )\n}\n\nexport default Content;","import React from 'react'\n\nconst NavLogo = () => {\n    return (\n        <div id=\"navLogo\" className=\"navLogo\">\n            <h1 className=\"navLogo__h1\">G2SHOOT</h1>\n        </div>\n    )\n}\n\nexport default NavLogo;","import React from 'react'\n\nconst NavMenuGrp = ({ title, path, handleChangePage }) => {\n    return (\n        <li className=\"navMenu__ul__li\" onClick={()=>handleChangePage(path)}>\n            { title }\n        </li>\n    )\n}\n\nexport default NavMenuGrp;","import React from 'react'\nimport NavMenuGrp from './NavMenuGrp';\n\nimport { useLang } from \"../../context/LangContext\";\nimport { useGame } from \"../../context/GameContext\";\nimport { useRound } from \"../../context/RoundContext\";\n\nconst NavMenu = ({ handleChangePage, handleShowResult, handleShowEndGame, handleTopPage }) => {\n\n    const { texts, handleChangeLanguage } = useLang();\n    const { game } = useGame();\n    const { round } = useRound();\n\n    let resume = game && (\n        <NavMenuGrp\n            key=\"navmenu-resume\"\n            title={ texts.navbar.resume }\n            path=\"game\"\n            handleChangePage={handleChangePage}\n        />\n    )\n\n    let endGame = game && (\n        <li className=\"navMenu__ul__li\" onClick={()=>handleTopPage(\"endgame\")}>\n            { texts.navbar.endGame }\n        </li>\n    )\n\n    let play = !game && (\n        <NavMenuGrp\n            key=\"navmenu-setup\"\n            title={ texts.navbar.play }\n            path=\"setup\"\n            handleChangePage={handleChangePage}\n        />\n    )\n\n    let result = round && (\n        <li className=\"navMenu__ul__li\" onClick={()=>handleTopPage(\"result\")}>\n            { texts.navbar.result }\n        </li>\n    )\n\n    let home = !game && (\n        <NavMenuGrp\n            key=\"navmenu-home\"\n            title={ texts.navbar.home }\n            path=\"home\"\n            handleChangePage={handleChangePage}\n        />\n    )\n\n    return (\n        <div className=\"navMenu\">\n            <ul className=\"navMenu__ul\">\n                { resume }\n                { endGame }\n                { play }\n                { result }\n                { home }\n                <li className=\"navMenu__ul__li\" onClick={()=>handleTopPage(\"howto\")}>\n                    { texts.navbar.howToPlay }\n                </li>\n                <li className=\"navMenu__ul__li\" onClick={()=>handleChangeLanguage({ lang: texts.language })}>\n                    { texts.navbar.language }\n                </li>\n            </ul>\n        </div>\n    )\n}\n\nexport default NavMenu;","import React, { useState } from 'react'\nimport NavLogo from './NavLogo';\nimport NavMenu from \"./NavMenu\";\n\nconst Navbar = ({ changePage, navIsOpen, setNavIsOpen, setTopPage }) => {\n\n\n    let navBtnIcon = navIsOpen ? \"navbarBtn__i fas fa-times\" : \"navbarBtn__i fas fa-bars\";\n\n    let navMenu = navIsOpen && (\n        <NavMenu \n            key=\"navMenu\"\n            handleChangePage={handleChangePage}\n            handleTopPage={handleTopPage}\n        />\n    );\n\n    function handleNavOpen() {\n        setNavIsOpen(prevState => !prevState);\n    }\n\n    function handleChangePage(page) {\n        setNavIsOpen(false);\n        changePage(page);\n        setTopPage(\"default\")\n    }\n\n    function handleTopPage(page) {\n        setNavIsOpen(false);\n        setTopPage(page)\n    }\n\n    return (\n        <div id=\"navbar\" className=\"navbar\">\n            <NavLogo />\n            { navMenu }\n            <button className=\"navbarBtn\" onClick={()=>handleNavOpen()}>\n                <i className={navBtnIcon}></i>\n            </button>\n        </div>\n    )\n}\n\nexport default Navbar;","import React from 'react'\n\nconst ResultPlayerCard = ({ player }) => {\n    return (\n        <div className=\"resultPlayerCard\">\n            <p className=\"resultPlayerCard__player\">\n                { player.id }\n            </p>\n            <div className=\"resultPlayerCard__stats\">\n                <p className=\"resultPlayerCard__stats__p\">\n                    { player.win }\n                </p>\n                <p className=\"resultPlayerCard__stats__symbol\">\n                    :\n                </p>\n                <p className=\"resultPlayerCard__stats__p\">\n                    { player.loseSmall }\n                </p>\n                <p className=\"resultPlayerCard__stats__symbol\">\n                    :\n                </p>\n                <p className=\"resultPlayerCard__stats__p\">\n                    { player.loseBig }\n                </p>\n            </div>\n            <p className=\"resultPlayerCard__balance\">\n                { player.balance }\n            </p>\n        </div>\n    )\n}\n\nexport default ResultPlayerCard;","import React from 'react';\n\nimport { useLang } from \"../../context/LangContext\";\nimport { useGame } from \"../../context/GameContext\";\nimport ResultPlayerCard from './ResultPlayerCard';\n\nconst ResultPlayers = () => {\n\n    const { texts } = useLang();\n    const { game } = useGame();\n\n    return (\n        <div id=\"resultPlayers\" className=\"resultPlayers\">\n            <h1 className=\"resultPlayers__h1\">\n                { texts.result.players.title }\n            </h1>\n            <div className=\"resultPlayerTitle\">\n                <div className=\"resultPlayerCard__title\">\n                    <i className=\"resultPlayerCard__title__i bi bi-person-fill\"></i>\n                    <p className=\"resultPlayerCard__title__p\">\n                        { texts.result.players.player }\n                    </p>\n                </div>\n                <div className=\"resultPlayerCard__title\">\n                    <i className=\"resultPlayerCard__title__i bi bi-trophy-fill\"></i>\n                    <p className=\"resultPlayerCard__title__p\">\n                        { texts.result.players.result }\n                    </p>\n                </div>\n                <div className=\"resultPlayerCard__title\">\n                    <i className=\"resultPlayerCard__title__i fas fa-dollar-sign\"></i>\n                    <p className=\"resultPlayerCard__title__p\">\n                        { texts.result.players.balance }\n                    </p>\n                </div>\n            </div>\n            <div className=\"resultPlayersCon\">\n                {game.players.map((player, i) => (\n                    <ResultPlayerCard\n                        key={`resultplayercard-${i}`}\n                        player={player}\n                    />\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default ResultPlayers;","import React from 'react';\n\nconst ResultGameCard = ({ title, data }) => {\n\n    let moneySymbol = title === \"TOTAL POOL\" && \"$\";\n\n    return (\n        <div className=\"resultGameCard\">\n            <p className=\"resultGameCard__title\">\n                { title }\n            </p>\n            <p className=\"resultGameCard__data\">\n                { moneySymbol }{ data }\n            </p>\n        </div>\n    )\n}\n\nexport default ResultGameCard;","import React from 'react'\n\nimport { useLang } from \"../../context/LangContext\";\nimport { useGame } from \"../../context/GameContext\";\nimport ResultGameCard from './ResultGameCard';\n\nconst ResultGame = () => {\n\n    const { texts } = useLang();\n    const { game } = useGame();\n\n    //<i className=\"resultGame__i fas fa-chart-bar\"></i>\n\n    return (\n        <div id=\"resultGame\" className=\"resultGame\">\n            <h1 className=\"resultGame__h1\">\n                { texts.result.game.title }\n            </h1>\n            <div className=\"resultGameCon\">\n                <ResultGameCard\n                    key=\"resultgamecard-pool\"\n                    title={ texts.result.game.totalPool }\n                    data={game.pool}\n                />\n                <ResultGameCard\n                    key=\"resultgamecard-players\"\n                    title={ texts.result.game.totalPlayers }\n                    data={game.players.length}\n                />\n                <ResultGameCard\n                    key=\"resultgamecard-cards\"\n                    title={ texts.result.game.remainingCards }\n                    data={game.cardReserve.length}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default ResultGame;","import React from 'react';\n\nimport { useLang } from \"../../context/LangContext\";\nimport { useRound, useRoundFunctions } from \"../../context/RoundContext\";\n\nconst ResultButton = ({ changePage, setTopPage, setNavIsOpen }) => {\n\n    const { texts } = useLang();\n    const { nextRound } = useRound();\n    const { endGame } = useRoundFunctions();\n\n    let returnToGame = nextRound && (\n        <button className=\"resultButton__btn\" onClick={()=>handleResumeGame()}>\n            <i className=\"resultButton__btn__i fas fa-undo-alt\" />\n            <p className=\"resultButton__btn__p\">\n                { texts.endGame.resume }\n            </p>\n        </button>\n    )\n\n    function handleResumeGame() {\n        setTopPage(\"default\");\n        setNavIsOpen(false);\n    }\n\n    function handleEndGame() {\n        // If the game is still active, redirect to EndGame to ask player again\n        if (nextRound) {\n            setTopPage(\"endgame\");\n            setNavIsOpen(false);\n        // If game over\n        } else {\n            changePage(\"home\");\n            setTopPage(\"default\");\n            setNavIsOpen(false);\n            endGame();\n        }\n    }\n\n    return (\n        <div id=\"resultButton\" className=\"resultButton\">\n            { returnToGame }\n            <button className=\"resultButton__btn\" onClick={()=>handleEndGame()}>\n                <i className=\"resultButton__btn__i fas fa-times\" />\n                <p className=\"resultButton__btn__p\">\n                    { texts.endGame.endGame }\n                </p>\n            </button>\n        </div>\n    )\n}\n\nexport default ResultButton;","import React from 'react'\nimport ResultPlayers from './ResultPlayers'\nimport ResultGame from './ResultGame'\nimport ResultButton from './ResultButton'\n\nconst Result = ({ changePage, setTopPage, setNavIsOpen }) => {\n    return (\n        <div id=\"result\" className=\"result\">\n            <ResultGame />\n            <ResultPlayers />\n            <ResultButton \n                changePage={changePage}\n                setTopPage={setTopPage}\n                setNavIsOpen={setNavIsOpen}\n            />\n        </div>\n    )\n}\n\nexport default Result;","import React from 'react';\nimport { useLang } from \"../../context/LangContext\";\nimport { useRoundFunctions } from '../../context/RoundContext';\n\nconst EndGame = ({ changePage, setTopPage, setNavIsOpen }) => {\n\n    const { texts } = useLang();\n    const { endGame } = useRoundFunctions();\n\n    function handleResumeGame() {\n        setTopPage(\"default\");\n        setNavIsOpen(false);\n    }\n\n    function handleEndGame() {\n        changePage(\"home\");\n        setTopPage(\"default\");\n        setNavIsOpen(false);\n        endGame();\n    }\n\n    return (\n        <div id=\"endGame\" className=\"endGame\">\n            <h1 className=\"endGame__h1\">\n                { texts.endGame.title }\n            </h1>\n            <div className=\"endGameButtons\">\n                <button className=\"endGameButtons__btn\" onClick={()=>handleResumeGame()}>\n                    <i className=\"endGameButtons__btn__i fas fa-undo-alt\" />\n                    <p className=\"endGameButtons__btn__p\">\n                        { texts.endGame.resume }\n                    </p>\n                </button>\n                <button className=\"endGameButtons__btn\" onClick={()=>handleEndGame()}>\n                    <i className=\"endGameButtons__btn__i bi bi-box-arrow-right\" />\n                    <p className=\"endGameButtons__btn__p\">\n                        { texts.endGame.endGame }\n                    </p>\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default EndGame;\n","export const HOW_TO_HK = [\n    [\n        \"首先玩家拎兩張牌作為「門柱」\"\n    ],\n    [\n        \"玩家依據彩池同「門柱」嘅點數決定要下注之金額，\", \n        \"最低為$1，\", \n        \"最高為當時的彩池總額。\"\n    ],\n    [\n        \"玩家再拎多一張牌作為「波」\"\n    ],\n    [ \n        \"若「波」嘅點數介乎「門柱」之間，\", \n        \"則該玩家可由彩金中贏取下注之金額。\"\n    ],\n    [\n        \"若在前兩張牌之外，\", \n        \"則玩家必須賠一倍下注金額放入彩池。\"\n    ],\n    [\n        \"若剛好與「門柱」之數值一樣（稱為撞柱），\", \n        \"則玩家賠兩倍下注金額放入彩池。\"\n    ]\n]\n\nexport const HOW_TO_EN = [\n    [\n        `First, player gets 2 cards as \"Woodworks\"`\n    ],\n    [\n        \"Player places bet in consideration of woodworks and total pool.\",\n        \"The minimum bet is $1.\", \n        \"The maximum bet is the total pool.\"\n    ],\n    [\n        `Player gets one more card as \"ball\".`\n    ],\n    [\n        `If the value of ball is in between the woodworks, that means player wins, therefore player can win 1x of the amount of the bet.`\n    ],\n    [\n        \"If the value of ball is smaller or larger than the woodworks, that means player loses, therefore player loses 1x the amount of the bet.\", \n    ],\n    [\n        `If the value of ball is exactly the same as one of the woodworks, that means player \"hits the woodworks\", as a result, player loses DOUBLE the amount of the bet.`\n    ]\n]","import React from 'react';\n\nconst HowtoCard = ({ step, descriptions }) => {\n\n    let descriptionsDisplay = descriptions && descriptions.map((item, i) => (\n        <p key={`howto-${step}-${i}`} className=\"howtocard__con__p\">\n            { item }\n        </p>\n    ))\n\n    console.log(descriptionsDisplay);\n\n    return (\n        <div className=\"howtocard\">\n            <p className=\"howtocard__step\">\n                { step }\n            </p>\n            <div className=\"howtocard__con\">\n                { descriptionsDisplay }\n            </div>\n        </div>\n    )\n}\n\nexport default HowtoCard;","import React from 'react';\n\nimport { useLang } from \"../../context/LangContext\";\nimport { HOW_TO_EN, HOW_TO_HK } from \"../../data/howtoData\";\nimport HowtoCard from './HowtoCard';\n\nconst Howto = () => {\n\n    const { lang, texts } = useLang();\n\n    let howtoInstructions = {\n        EN: HOW_TO_EN,\n        HK: HOW_TO_HK,\n    }\n\n    let howtoDisplay = howtoInstructions[lang].map((item, i) => (\n        <HowtoCard\n            key={`howtocard-${i}`}\n            step={ i + 1}\n            descriptions={ item }\n        />\n    ))\n\n    return (\n        <div id=\"howto\" className=\"topPage\">\n            <div className=\"topPageContent howto\">\n                <h2 className=\"howto__h2\">\n                    { texts.howto.title }\n                </h2>\n                <div className=\"howto__steps\">\n                { howtoDisplay }\n            </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Howto;\n","import React from 'react'\n\nconst Contact = () => {\n    return (\n        <div id=\"contact\" className=\"topPage\">\n            <div className=\"topPageContent\">\n                CONTACT\n            </div>\n        </div>\n    )\n}\n\nexport default Contact;","import React, { useState } from \"react\";\nimport './App.css';\n\nimport Content from \"./components/content/Content\";\nimport Navbar from \"./components/navbar/Navbar\";\nimport Result from \"./components/result/Result\";\nimport EndGame from \"./components/endGame/EndGame\";\nimport Howto from \"./components/howto/Howto\";\nimport Contact from \"./components/contact/Contact\";\n\nfunction App() {\n\n    const [topPage, setTopPage] = useState(\"default\");\n    const [navIsOpen, setNavIsOpen] = useState(false);\n    const [currentPage, setCurrentPage] = useState(\"home\");\n\n    function changePage(page) {\n        setCurrentPage(page);\n    }\n\n    const TOP_PAGE = {\n        result: (\n            <Result\n                key=\"result\"\n                changePage={changePage}\n                setNavIsOpen={setNavIsOpen}\n                setTopPage={setTopPage}\n            />\n        ),\n        endgame: (\n            <EndGame \n                key=\"result\"\n                changePage={changePage}\n                setNavIsOpen={setNavIsOpen}\n                setTopPage={setTopPage}\n            />\n        ),\n        howto: (\n            <Howto />\n        ),\n        contact: (\n            <Contact />\n        ),\n        default: \"\"\n    }\n\n    return (\n        <div className=\"App\">\n            { TOP_PAGE[topPage] }\n            <Navbar \n                key=\"navbar\"\n                changePage={changePage}\n                navIsOpen={navIsOpen}\n                setNavIsOpen={setNavIsOpen}\n                setTopPage={setTopPage}\n            />\n            <Content\n                key=\"content\"\n                currentPage={currentPage}\n                changePage={changePage}\n                setTopPage={setTopPage}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { GameProvider } from './context/GameContext';\nimport { RoundProvider } from './context/RoundContext';\nimport { LangProvider } from './context/LangContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <LangProvider>\n      <GameProvider>\n        <RoundProvider>\n          <App />\n        </RoundProvider>\n      </GameProvider>\n    </LangProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}