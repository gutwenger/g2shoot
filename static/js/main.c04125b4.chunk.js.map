{"version":3,"sources":["components/home/HomeBtn.js","components/home/Home.js","data/setupData.js","components/setup/SetupGrp.js","context/GameContext.js","context/RoundContext.js","components/setup/SetupForm.js","components/setup/Setup.js","components/game/GameCard.js","components/game/GameBall.js","components/game/GamePanelBet.js","components/game/GamePanelResult.js","components/game/GamePanelControl.js","components/game/GamePanelInfo.js","components/game/GamePanel.js","components/game/GameWoodWorks.js","components/game/Game.js","components/content/Content.js","components/navbar/NavLogo.js","components/navbar/NavMenuGrp.js","components/navbar/NavMenu.js","components/navbar/Navbar.js","components/result/ResultPlayerCard.js","components/result/ResultPlayers.js","components/result/ResultGameCard.js","components/result/ResultGame.js","components/result/ResultButton.js","components/result/Result.js","components/endGame/EndGame.js","data/howtoData.js","components/howto/HowtoCard.js","components/howto/Howto.js","components/contact/Contact.js","App.js","index.js"],"names":["HomeBtn","icon","page","title","setTopPage","changePage","className","onClick","Home","id","SETUP_GAME_FORM","label","name","min","max","defaultValue","SetupGrp","item","htmlFor","type","required","GameContext","React","createContext","GameFunctionsContext","useGame","useContext","useGameFunctions","GameProvider","children","useState","game","setGame","isGameOver","setIsGameOver","generateCards","numberOfCardsets","CARD_SCHEME","spade","heart","club","diamond","CARD_NUMBER","1","2","3","4","5","6","7","8","9","10","11","12","13","CARDS","i","SCHEME","j","push","number","scheme","symbol","value","Provider","setupGame","numberOfPlayers","initialBalance","initialPool","newGame","players","PLAYERS","balance","Number","isActive","win","loseSmall","loseBig","generatePlayer","cardReserve","pool","currentPlayerID","Math","floor","random","usedCards","gameHistory","getCard","remainingNumberOfCards","length","randomIndex","card","splice","prevState","get2Cards","card1","card2","sort","a","b","gameOver","updatePlayer","player","playerIndex","findIndex","newPlayers","slice","updatePool","updateGame","round","checkValidGame","some","RoundContext","RoundFunctionsContext","useRound","useRoundFunctions","RoundProvider","setupRound","setRound","nextRound","setNextRound","checkTurn","stage","woodworks","bet","ball","result","source","nextPlayerID","nextPlayerFound","counter","setupInitialRound","getWoodworks","prevRound","placeBet","getBall","getResult","minVal","maxVal","CardVal","playerBalance","prize","hasNextRound","roundResult","prevGame","history","endRound","endGame","SetupForm","createGame","formRef","useRef","formItems","map","ref","onSubmit","event","preventDefault","FORM","current","data","forEach","handleSubmit","Setup","GameCard","handleCardClick","cardClicked","setCardClicked","gameCardDivClass","display","handleClick","GameBall","clicked","setClicked","useEffect","readyToGetCard","GamePanelBet","betRef","MAX_BET","GamePanelResult","resultClass","GamePanelControl","GamePanelInfoGrp","playerClass","GamePanelInfo","GamePanel","GameWoodWorks","Set","disabled","setDisabled","add","size","Game","Content","currentPage","PAGE","home","setup","NavLogo","NavMenuGrp","path","handleChangePage","NavMenu","handleTopPage","handleShowResult","handleShowEndGame","resume","play","Navbar","navIsOpen","setNavIsOpen","navBtnIcon","navMenu","ResultPlayerCard","ResultPlayers","ResultGameCard","moneySymbol","ResultGame","ResultButton","returnToGame","Result","EndGame","HOW_TO","HowtoCard","step","descriptions","descriptionsDisplay","console","log","Howto","howtoDisplay","Contact","App","topPage","setCurrentPage","TOP_PAGE","endgame","howto","contact","default","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAoBeA,EAlBC,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,KAAMC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,WAAYC,EAAiB,EAAjBA,WAU9C,OACI,sBAAKC,UAAU,UAAUC,QAAS,WARrB,UAATL,EACAE,EAAW,SAEXC,EAAWH,IAKf,UACI,mBAAGI,UAAS,qBAAgBL,KAC5B,mBAAGK,UAAU,aAAb,SAA4BH,QCUzBK,EAtBF,SAAC,GAAgC,IAA9BH,EAA6B,EAA7BA,WAAYD,EAAiB,EAAjBA,WACxB,OACI,sBAAKK,GAAG,OAAOH,UAAU,OAAzB,UACI,cAAC,EAAD,CAEIJ,KAAK,QACLD,KAAK,uBACLE,MAAM,WACNE,WAAYA,GAJR,gBAMR,cAAC,EAAD,CAEIH,KAAK,QACLD,KAAK,cACLE,MAAM,cACNE,WAAYA,EACZD,WAAYA,GALR,oBCdPM,EAAkB,CAC3B,CACIC,MAAO,oBACPC,KAAM,kBACNC,IAAK,EACLC,IAAK,GACLC,aAAc,GAElB,CACIJ,MAAO,qBACPC,KAAM,mBACNC,IAAK,EACLC,IAAK,IACLC,aAAc,GAElB,CACIJ,MAAO,iBACPC,KAAM,iBACNC,IAAK,GACLC,IAAK,IACLC,aAAc,IAElB,CACIJ,MAAO,eACPC,KAAM,cACNC,IAAK,EACLC,IAAK,IACLC,aAAc,ICLPC,EApBE,SAAC,GAAuD,IAAD,IAApDC,KAAQN,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,IAAKC,EAA0B,EAA1BA,IAAKC,EAAqB,EAArBA,aAC/C,OACI,sBAAKT,UAAU,WAAf,UACI,uBAAOY,QAAO,mBAAcN,GAAQN,UAAU,kBAA9C,SACMK,IAEN,uBACIF,GAAE,mBAAcG,GAChBN,UAAU,kBACVM,KAAMA,EACNO,KAAK,SACLN,IAAKA,EACLC,IAAKA,EACLC,aAAcA,EACdK,UAAQ,Q,cCdlBC,EAAcC,IAAMC,gBACpBC,EAAuBF,IAAMC,gBAE5B,SAASE,IACZ,OAAOC,qBAAWL,GAGf,SAASM,IACZ,OAAOD,qBAAWF,GAGf,IAAMI,EAAe,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAclBC,mBAAS,MAdS,mBAcnCC,EAdmC,KAc7BC,EAd6B,OAeNF,oBAAS,GAfH,mBAenCG,EAfmC,KAevBC,EAfuB,KAsC1C,SAASC,EAAT,GA8BI,IA9B0C,IAArBC,EAAoB,EAApBA,iBAGfC,EAAc,CAChBC,MAAO,SACPC,MAAO,SACPC,KAAM,SACNC,QAAS,UAGPC,EAAc,CAChBC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,EAAG,IACHC,GAAI,KACJC,GAAI,IACJC,GAAI,IACJC,GAAI,KAGFC,EAAQ,GAEV/C,EAAK,EAEAgD,EAAI,EAAGA,EAAIrB,EAAkBqB,IAClC,IAAK,IAAMC,KAAUrB,EACjB,IAAK,IAAIsB,EAAI,EAAGA,EAAI,GAAIA,IACpBH,EAAMI,KAAK,CACPnD,KACAoD,OAAQnB,EAAYiB,GACpBG,OAAQJ,EACRK,OAAQ1B,EAAYqB,GACpBM,MAAOL,IAEXlD,IAIZ,OAAO+C,EAwKX,OACI,cAACnC,EAAY4C,SAAb,CAAsBD,MAAO,CAAEjC,OAAME,cAArC,SACI,cAACT,EAAqByC,SAAtB,CAA+BD,MAAO,CAClCE,UAvKZ,YAAwF,IAAnEC,EAAkE,EAAlEA,gBAAiBC,EAAiD,EAAjDA,eAAgBhC,EAAiC,EAAjCA,iBAAkBiC,EAAe,EAAfA,YAqBhEC,EAAU,CACVH,kBACA/B,mBACAiC,cACAE,QA7FR,YAKI,IAL0D,IAApCJ,EAAmC,EAAnCA,gBAAiBC,EAAkB,EAAlBA,eAGjCI,EAAU,GAEPf,EAAI,EAAGA,EAAIU,EAAiBV,IACjCe,EAAQZ,KAAK,CACTnD,GAAIgD,EACJgB,QAASC,OAAON,GAChBO,UAAU,EACVC,IAAK,EACLC,UAAW,EACXC,QAAS,IAIjB,OAAON,EA6DOO,CAAe,CAAEZ,kBAAiBC,mBAiB5CY,YAdc7C,EAAc,CAAEC,qBAe9B6C,KAZOZ,EAAcF,EAarBe,gBAVkBC,KAAKC,MAAMD,KAAKE,SAAWlB,GAW7CmB,UAAW,GACXC,YAAa,IAMjB,OAFAvD,EAAQsC,GAEDA,GAmIYtC,UAASwD,QAvFhC,WAMI,IAAIC,EAAyB1D,EAAKiD,YAAYU,OAC1CC,EAAcR,KAAKC,MAAMD,KAAKE,SAAWI,GACzCG,EAAO7D,EAAKiD,YAAYa,OAAOF,EAAa,GAAG,GAOnD,OALA3D,GAAQ,SAAA8D,GAAS,kCACVA,GADU,IAEbR,UAAU,GAAD,mBAAMQ,EAAUR,WAAhB,CAA2BM,SAGjCA,GAwE8BG,UApEzC,WAOI,IAAIf,EAAcjD,EAAKiD,YACnBS,EAAyBT,EAAYU,OACrCM,EAAQhB,EAAYa,OAAOV,KAAKC,MAAMD,KAAKE,SAAWI,GAAyB,GAAG,GAClFQ,EAAQjB,EAAYa,OAAOV,KAAKC,MAAMD,KAAKE,SAAWI,EAAyB,GAAI,GAAG,GAO1F,OALAzD,GAAQ,SAAA8D,GAAS,kCACVA,GADU,IAEbR,UAAU,GAAD,mBAAMQ,EAAUR,WAAhB,CAA2BU,EAAOC,SAGxC,CAACD,EAAOC,GAAOC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEnC,MAAQoC,EAAEpC,UAmDDqC,SARpD,WACIrE,EAAQ,MACRE,GAAc,IAM4CoE,aA/C9D,YAAmC,IAAXC,EAAU,EAAVA,OAKhBC,EAAczE,EAAKwC,QAAQkC,WAAU,SAAAxF,GAAI,OAAIA,EAAKR,KAAO8F,EAAO9F,MAChEiG,EAAa3E,EAAKwC,QAAQoC,QAC9BD,EAAWF,GAAeD,EAC1BvE,GAAQ,SAAA8D,GAAS,kCACVA,GADU,IAEbvB,QAASmC,QAqC2DE,WAhC5E,YAA+B,IAAT3B,EAAQ,EAARA,KAKlBjD,GAAQ,SAAA8D,GAAS,kCACVA,GADU,IAEbb,aAyBgF4B,WApBxF,YAAgC,IAAVC,EAAS,EAATA,MAKlB9E,GAAQ,SAAA8D,GAAS,kCACVA,GADU,IAEbP,YAAY,GAAD,mBAAMO,EAAUP,aAAhB,CAA6BuB,UAaoDC,eA1GpG,WACI,QAZ0BhF,EAAKiD,YAAYU,OACjB,IAMnB3D,EAAKwC,QAAQyC,MAAK,SAAAT,GAAM,OAAIA,EAAO5B,eA6GtC,SAGM9C,OCxQZoF,EAAe3F,IAAMC,gBACrB2F,EAAwB5F,IAAMC,gBAE7B,SAAS4F,IACZ,OAAOzF,qBAAWuF,GAGf,SAASG,IACZ,OAAO1F,qBAAWwF,GAGf,IAAMG,EAAgB,SAAC,GAAkB,IAAhBxF,EAAe,EAAfA,SAEpBE,EAASN,IAATM,KAFmC,EAG4DJ,IAA/FK,EAHmC,EAGnCA,QAASkC,EAH0B,EAG1BA,UAAWsB,EAHe,EAGfA,QAASO,EAHM,EAGNA,UAAWM,EAHL,EAGKA,SAAUC,EAHf,EAGeA,aAAcM,EAH7B,EAG6BA,WAAYG,EAHzC,EAGyCA,eAHzC,EAIjBjF,oBAAS,kBAAIwF,OAJI,mBAIpCR,EAJoC,KAI7BS,EAJ6B,OAKTzF,oBAAS,GALA,mBAKpC0F,EALoC,KAKzBC,EALyB,KA6B3C,SAASH,IAGL,IAAKvF,EAAM,OAAO,KAGlB,IAAIwE,EAASmB,EAAU,IAGvBH,EAAS,CACLI,MAAO,YACPpB,OAAQA,EACRqB,UAAW,GACXC,IAAK,EACLC,KAAM,KACNC,OAAQ,KAGZN,GAAa,GAIjB,SAASC,EAAT,GAYI,IAZ6B,IAAZpD,EAAW,EAAXA,QAKb0D,EAAU1D,GAAUvC,EAEpBwC,EAAUyD,EAAOzD,QACjB0D,EAAeD,EAAO9C,gBACtBgD,GAAkB,EAClBC,EAAU,GAEND,GAOJ,GALAC,GAAW,GADXF,GAAgB,KAGK1D,EAAQmB,SAAQuC,GAAgB1D,EAAQmB,QAEzDnB,EAAQ0D,GAActD,WAAUuD,GAAkB,GAClDC,IAAY5D,EAAQmB,OAAS,EAAG,OAAO,EAS/C,OALA1D,GAAQ,SAAA8D,GAAS,kCACVA,GADU,IAEbZ,gBAAiB+C,OAGd1D,EAAQ0D,GA8JnB,OACI,cAAChB,EAAahD,SAAd,CAAuBD,MAAO,CAAE8C,QAAOU,aAAvC,SACI,cAACN,EAAsBjD,SAAvB,CAAgCD,MAAO,CACnCuD,WAAUD,aAAYc,kBAxOlC,YAAgG,IAAnEjE,EAAkE,EAAlEA,gBAAiBC,EAAiD,EAAjDA,eAAgBhC,EAAiC,EAAjCA,iBAAkBiC,EAAe,EAAfA,YAKxEkC,EAASmB,EAAU,CAAEpD,QAHXJ,EAAU,CAAEC,kBAAiBC,iBAAgBhC,mBAAkBiC,kBAM7EkD,EAAS,CACLI,MAAO,YACPpB,OAAQA,EACRqB,UAAW,GACXC,IAAK,EACLC,KAAM,KACNC,OAAQ,KAGZN,GAAa,IAwNLY,aA9JZ,WAMI,IAAIT,EAAY7B,IAGhBwB,GAAS,SAAAe,GAAS,kCACXA,GADW,IAEdV,kBAmJkBW,SA9I1B,YAA4B,IAARV,EAAO,EAAPA,IAKhBN,GAAS,SAAAe,GAAS,kCACXA,GADW,IAEdX,MAAO,OACPE,YAsI4BW,QAjIpC,WAMI,IAAIV,EAAOtC,IAEX+B,GAAS,SAAAe,GAAS,kCACXA,GADW,IAEdR,aAuHqCW,UAlH7C,WAKI,IAAIlC,EAASO,EAAMP,OACfmC,EAAS5B,EAAMc,UAAU,GAAG5D,MAC5B2E,EAAS7B,EAAMc,UAAU,GAAG5D,MAC5B4E,EAAU9B,EAAMgB,KAAK9D,MACrBiB,EAAOP,OAAO3C,EAAKkD,MACnB4D,EAAgBnE,OAAO6B,EAAO9B,SAC9BoD,EAAMnD,OAAOoC,EAAMe,KACnBiB,EAAQ,EAERf,EAASa,EAAUF,GAAUE,EAAUD,EACzB,MACAC,IAAYF,GAAUE,IAAYD,EAC9B,UACA,YAQtB,OAAQZ,GACJ,IAAK,MACDc,GAAiBhB,EACjB5C,GAAQ4C,EACRiB,EAAQjB,EACR,MACJ,IAAK,YACDgB,GAAiBhB,EACjB5C,GAAQ4C,EACRiB,GAASjB,EACT,MACJ,IAAK,UACDgB,GAAwB,EAANhB,EAClB5C,GAAe,EAAN4C,EACTiB,GAAgB,EAANjB,EAQlBtB,EAAO9B,QAAUoE,EAGjBtC,EAAO5B,SAAWkE,EAAgB,EAGlCtC,EAAOwB,KAGPzB,EAAa,CAAEC,WAGfK,EAAW,CAAE3B,SAGb,IAAI8D,EAAehC,KAAoB9B,EAAO,EAE1C+D,EAAc,CACdjB,SAAQe,SAiBZ,OAdAvB,GAAS,SAAAzB,GAAS,kCACXA,GADW,IAEd6B,MAAO,SACPI,OAAQiB,OAIZhH,GAAQ,SAAAiH,GAAQ,kCACTA,GADS,IAEZC,QAAQ,GAAD,mBAAMD,EAAS1D,aAAf,CAA4ByD,SAGvCvB,EAAasB,GAENC,GA+B6CG,SA3BxD,WAMI7B,KAqB8D8B,QAlBlE,WAMI7B,EAAS,MACTE,GAAa,GAGbpB,MAMI,SAIMxE,OCnNHwH,EAxCU,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,WAAYjJ,EAAiB,EAAjBA,WAIhCkJ,GAFmBnC,IAAfE,WAEMkC,oBAEVC,EAAY/I,EAAgBgJ,KAAI,SAACzI,EAAMwC,GAAP,OAChC,cAAC,EAAD,CAEIxC,KAAMA,GAFV,mBACqBwC,OAmBzB,OACI,uBAAMnD,UAAU,YAAYqJ,IAAKJ,EAASK,SAAU,SAACC,GAAD,OAfxD,SAAsBA,GAClBA,EAAMC,iBACN,IAAMC,EAAOR,EAAQS,QAGjBC,EAAO,GACXvJ,EAAgBwJ,SAAQ,SAAAjJ,GACpBgJ,EAAKhJ,EAAKL,MAAQmJ,EAAK9I,EAAKL,MAAMoD,SAGtCsF,EAAWW,GACX5J,EAAW,QAIkD8J,CAAaN,IAA1E,UACI,oBAAIvJ,UAAU,gBAAd,wBAGEmJ,EACF,wBAAQnJ,UAAU,iBAAlB,4BCdG8J,EApBD,SAAC,GAAoB,IAAlB/J,EAAiB,EAAjBA,WAGL+H,GADczG,IAAduC,UACsBkD,IAAtBgB,mBAMR,OACI,qBAAK3H,GAAG,QAAQH,UAAU,QAA1B,SACI,cAAC,EAAD,CAEIgJ,WARZ,YAAyF,IAAnEnF,EAAkE,EAAlEA,gBAAiBC,EAAiD,EAAjDA,eAAgBhC,EAAiC,EAAjCA,iBAAkBiC,EAAe,EAAfA,YACrE+D,EAAkB,CAAEjE,kBAAiBC,iBAAgBhC,mBAAkBiC,iBAQ/DhE,WAAYA,GAFR,gBCyBLgK,EAzCS,SAAC,GAAsC,IAApCzE,EAAmC,EAAnCA,KAAM0E,EAA6B,EAA7BA,gBAAiBtG,EAAY,EAAZA,MAAY,EAEpBlC,oBAAS,GAFW,mBAEnDyI,EAFmD,KAEtCC,EAFsC,KAWtDC,EAAoB7E,IAAyB,UAAhBA,EAAK9B,QAAsC,YAAhB8B,EAAK9B,SAA0B,sBAEvF4G,EAAUH,EAEN,sBAAKjK,UAAS,wBAAmBmK,GAAjC,UACI,qBAAKnK,UAAU,qBAAf,SACI,mBAAGA,UAAU,wBAAb,SAAuCsF,EAAK/B,WAEhD,mBAAGvD,UAAS,2BAfJ,CAChBgC,MAAO,wBACPC,MAAO,wBACPC,KAAM,uBACNC,QAAS,2BAW6CmD,EAAK9B,cAIvD,mBAAGxD,UAAU,gCAQrB,OACI,qBACIA,UAAU,WACVC,QAAS,kBARjB,YAAiC,IAAVyD,EAAS,EAATA,MACnBsG,EAAgB,CAAEtG,UAClBwG,GAAe,GAMEG,CAAY,CAAE3G,WAF/B,SAIM0G,KC0CCE,EA3EE,SAAC,GAAe,IAAbjD,EAAY,EAAZA,MAERb,EAAUK,IAAVL,MAFoB,EAGGM,IAAvBoB,EAHoB,EAGpBA,QAASC,EAHW,EAGXA,UAHW,EAIE3G,oBAAS,GAJX,mBAIrB+I,EAJqB,KAIZC,EAJY,KAU5B,SAASR,IACAO,GAASpC,IACdqC,GAAW,GANfC,qBAAU,WACDjE,EAAMgB,MAAMgD,GAAW,MAQhC,IAAIE,EAAiBlE,EAAMgB,KAEnB,qBAAKxH,UAAU,iBAAf,SACI,cAAC,EAAD,CAEIsF,KAAMkB,EAAMgB,KACZwC,gBAAiBA,EACjBtG,MAAM,QAHF,cAQZ,qBAAK1D,UAAU,iBAAf,SACI,yBAAQA,UAAU,sBAAsBC,QAAS,kBAAIiI,KAArD,UACI,mBAAGlI,UAAU,gDACb,mBAAGA,UAAU,yBAAb,sBAOZoK,EAAU,CACV9C,UACI,qBAAKtH,UAAU,iBAAf,SACI,mBAAGA,UAAU,oBAAb,mDAKRuH,IACI,qBAAKvH,UAAU,iBAAf,SACI,mBAAGA,UAAU,oBAAb,mDAKRwH,KAAMkD,EACNjD,OACI,qBAAKzH,UAAU,iBAAf,SACI,cAAC,EAAD,CAEIsF,KAAMkB,EAAMgB,KACZwC,gBAAiBA,EACjBtG,MAAM,QAHF,eASpB,OACI,sBAAKvD,GAAG,WAAWH,UAAU,WAA7B,UACI,mBAAGA,UAAU,cAAb,kBAGEoK,EAAQ/C,OCnCPsD,EAlCM,WAAO,IAEhBlJ,EAASN,IAATM,KACA+E,EAAUK,IAAVL,MACAyB,EAAanB,IAAbmB,SAEJ2C,EAAS1B,mBAEP2B,EAAUrE,EAAMP,OAAO9B,QAAU1C,EAAKkD,KAAOlD,EAAKkD,KAAO6B,EAAMP,OAAO9B,QAQ5E,OACI,uBAAMhE,GAAG,eAAeH,UAAU,eAAesJ,SAAU,SAACC,GAAD,OAP/D,SAAsBA,GAClBA,EAAMC,iBACN,IAAIjC,EAAMqD,EAAOlB,QAAQhG,MACzBuE,EAAS,CAAEV,QAIyDsC,CAAaN,IAAjF,UACI,uBACIpJ,GAAG,sBACHH,UAAU,sBACVM,KAAK,MACLO,KAAK,SACLN,IAAK,EACLC,IAAKqK,EACLpK,aAAc,EACdK,UAAQ,EACRuI,IAAKuB,IAET,wBAAQ/J,KAAK,SAASb,UAAU,oBAAhC,qBCSG8K,EAxCS,SAAC,GAAoB,IAAlBhL,EAAiB,EAAjBA,WAAiB,EAEX+G,IAArBL,EAFgC,EAEhCA,MAAOU,EAFyB,EAEzBA,UACP2B,EAAa/B,IAAb+B,SAEJpB,EAAiC,QAAxBjB,EAAMiB,OAAOA,OACpB,MACwB,cAAxBjB,EAAMiB,OAAOA,OACT,OACA,gBAENsD,EAAsC,QAAxBvE,EAAMiB,OAAOA,OACzB,4BACA,6BAUN,OACI,sBAAKtH,GAAG,kBAAkBH,UAAU,kBAApC,UACI,sBAAKG,GAAG,uBAAuBH,UAAS,+BAA0B+K,GAAlE,UACI,mBAAG/K,UAAU,0BAAb,SACMyH,IAEN,oBAAGzH,UAAU,6BAAb,cACMwG,EAAMiB,OAAOe,YAGvB,wBAAQxI,UAAU,uBAAuBC,QAAS,WAjBlDiH,EACA2B,IAEA/I,EAAW,WAcX,SACKoH,EAAY,aAAe,mBCQ7B8D,EAxCU,SAAC,GAAgC,IAA9BjL,EAA6B,EAA7BA,WAAYD,EAAiB,EAAjBA,WAE5B0G,EAAUK,IAAVL,MAEJ4D,EAAU,CACV9C,UACI,sBAAKtH,UAAU,yBAAf,UACI,mBAAGA,UAAU,iCAAb,eACA,mBAAGA,UAAU,4BAAb,uCAGRuH,IACI,sBAAKvH,UAAU,yBAAf,UACI,mBAAGA,UAAU,iCAAb,eACA,cAAC,EAAD,GACQ,mBAIhBwH,KACI,sBAAKxH,UAAU,yBAAf,UACI,mBAAGA,UAAU,iCAAb,eACA,mBAAGA,UAAU,4BAAb,kCAGRyH,OACQ,cAAC,EAAD,CACI1H,WAAYA,EACZD,WAAYA,KAK5B,OACI,qBAAKE,UAAU,mBAAf,SACMoK,EAAQ5D,EAAMa,UCpCtB4D,EAAmB,SAAC,GAAqB,IAAnBpL,EAAkB,EAAlBA,MAAO8J,EAAW,EAAXA,KAE3BlG,GAAoB,YAAV5D,GAAiC,SAAVA,IAAqB,IACtDqL,EAAwB,WAAVrL,GAAsB,iCAExC,OACI,sBAAKG,UAAU,mBAAf,UACI,mBAAGA,UAAU,0BAAb,SAAyCH,IACzC,oBAAGG,UAAS,iCAA4BkL,GAAxC,UAAyDzH,EAAUkG,SAoChEwB,EA/BO,WAAO,IAEjB1J,EAASN,IAATM,KACA+E,EAAUK,IAAVL,MAER,OACI,sBAAKxG,UAAU,gBAAf,UACI,cAAC,EAAD,CAEIH,MAAM,SACN8J,KAAMnD,EAAMP,OAAO9F,IAFf,2BAIR,cAAC,EAAD,CAEIN,MAAM,UACN8J,KAAMnD,EAAMP,OAAO9B,SAFf,4BAIR,cAAC,EAAD,CAEItE,MAAM,OACN8J,KAAMlI,EAAKkD,MAFP,yBAIR,cAAC,EAAD,CAEI9E,MAAM,QACN8J,KAAMlI,EAAKiD,YAAYU,QAFnB,8BCtBLgG,EAfG,SAAC,GAAgC,IAA9BrL,EAA6B,EAA7BA,WAAYD,EAAiB,EAAjBA,WAC7B,OACI,sBAAKK,GAAG,YAAYH,UAAU,YAA9B,UACI,cAAC,EAAD,GACQ,iBAER,cAAC,EAAD,CAEID,WAAYA,EACZD,WAAYA,GAFR,wBCgELuL,EArEO,WAAO,IAEjB7E,EAAUK,IAAVL,MAFgB,EAGWM,IAA3BG,EAHgB,EAGhBA,SAAUc,EAHM,EAGNA,aAHM,EAIMvG,mBAAS,IAAI8J,KAJnB,mBAIjBf,EAJiB,KAIRC,EAJQ,OAKQhJ,oBAAS,GALjB,mBAKjB+J,EALiB,KAKPC,EALO,KAkBxB,SAASxB,EAAT,GAAqC,IAAVtG,EAAS,EAATA,MACvB6G,EAAQkB,IAAI/H,GACZ8G,EAAWD,GAEU,IAAjBA,EAAQmB,MAAeH,IACvBtE,GAAS,SAAAzB,GAAS,kCACXA,GADW,IAEd6B,MAAO,WAEXmE,GAAY,IApBpBf,qBAAU,WAKyB,IAA3BjE,EAAMc,UAAUlC,SAChBoF,EAAW,IAAIc,KACfE,GAAY,MALjB,CAAChF,IAsBJ,IAAI4D,EAAU5D,EAAMc,UAAUlC,OAAS,EAE/B,sBAAKpF,UAAU,uBAAf,UACI,cAAC,EAAD,CAEIsF,KAAMkB,EAAMc,UAAU,GACtB0C,gBAAiBA,EACjBtG,MAAM,OAHF,gBAKR,cAAC,EAAD,CAEI4B,KAAMkB,EAAMc,UAAU,GACtB0C,gBAAiBA,EACjBtG,MAAM,OAHF,mBAQZ,qBAAK1D,UAAU,uBAAf,SACI,yBAAQA,UAAU,4BAA4BC,QAAS,kBAAI8H,KAA3D,UACI,mBAAG/H,UAAU,sDACb,mBAAGA,UAAU,+BAAb,sBAOhB,OACI,sBAAKG,GAAG,gBAAgBH,UAAU,gBAAlC,UACI,mBAAGA,UAAU,mBAAb,uBAGEoK,MC3CCuB,EApBF,SAAC,GAAgC,IAA9B5L,EAA6B,EAA7BA,WAAYD,EAAiB,EAAjBA,WAEhB0G,EAAUK,IAAVL,MAER,OACI,sBAAKrG,GAAG,OAAOH,UAAU,OAAzB,UACI,cAAC,EAAD,IACA,cAAC,EAAD,CAEIqH,MAAOb,EAAMa,OADT,YAGR,cAAC,EAAD,CACIA,MAAOb,EAAMa,MACbtH,WAAYA,EACZD,WAAYA,QCcb8L,EA7BC,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,YAAa9L,EAA6B,EAA7BA,WAAYD,EAAiB,EAAjBA,WAElCgM,EAAO,CACTC,KACI,cAAC,EAAD,CACIhM,WAAYA,EACZD,WAAYA,IAGpBkM,MACI,cAAC,EAAD,CACIjM,WAAYA,IAGpB0B,KACI,cAAC,EAAD,CACI1B,WAAYA,EACZD,WAAYA,KAKxB,OACI,qBAAKK,GAAG,UAAUH,UAAU,UAA5B,SACM8L,EAAKD,MCpBJI,EARC,WACZ,OACI,qBAAK9L,GAAG,UAAUH,UAAU,UAA5B,SACI,oBAAIA,UAAU,cAAd,wBCKGkM,EARI,SAAC,GAAuC,IAArCrM,EAAoC,EAApCA,MAAOsM,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBAC/B,OACI,oBAAIpM,UAAU,kBAAkBC,QAAS,kBAAImM,EAAiBD,IAA9D,SACMtM,KCgECwM,EA/DC,SAAC,GAA8E,IAA5ED,EAA2E,EAA3EA,iBAAuDE,GAAoB,EAAzDC,iBAAyD,EAAvCC,kBAAuC,EAApBF,eAE9D7K,EAASN,IAATM,KACA+E,EAAUK,IAAVL,MAEJiG,EAAShL,GACT,cAAC,EAAD,CAEI5B,MAAM,SACNsM,KAAK,OACLC,iBAAkBA,GAHd,kBAORtD,EAAUrH,GACV,oBAAIzB,UAAU,kBAAkBC,QAAS,kBAAIqM,EAAc,YAA3D,sBAKAI,GAAQjL,GACR,cAAC,EAAD,CAEI5B,MAAM,OACNsM,KAAK,QACLC,iBAAkBA,GAHd,iBAOR3E,EAASjB,GACT,oBAAIxG,UAAU,kBAAkBC,QAAS,kBAAIqM,EAAc,WAA3D,oBAKAP,GAAQtK,GACR,cAAC,EAAD,CAEI5B,MAAM,OACNsM,KAAK,OACLC,iBAAkBA,GAHd,gBAOZ,OACI,qBAAKpM,UAAU,UAAf,SACI,qBAAIA,UAAU,cAAd,UACMyM,EACA3D,EACA4D,EACAjF,EACAsE,EACF,oBAAI/L,UAAU,kBAAkBC,QAAS,kBAAIqM,EAAc,UAA3D,yBAGA,oBAAItM,UAAU,kBAAkBC,QAAS,kBAAIqM,EAAc,YAA3D,2BCnBDK,EAtCA,SAAC,GAAyD,IAAvD5M,EAAsD,EAAtDA,WAAY6M,EAA0C,EAA1CA,UAAWC,EAA+B,EAA/BA,aAAc/M,EAAiB,EAAjBA,WAE/CgN,EAAaF,EAAY,4BAA8B,2BAEvDG,EAAUH,GACV,cAAC,EAAD,CAEIR,iBASR,SAA0BxM,GACtBiN,GAAa,GACb9M,EAAWH,GACXE,EAAW,YAXPwM,cAcR,SAAuB1M,GACnBiN,GAAa,GACb/M,EAAWF,KAlBH,WAqBZ,OACI,sBAAKO,GAAG,SAASH,UAAU,SAA3B,UACI,cAAC,EAAD,IACE+M,EACF,wBAAQ/M,UAAU,YAAYC,QAAS,WAlB3C4M,GAAa,SAAArH,GAAS,OAAKA,MAkBvB,SACI,mBAAGxF,UAAW8M,UCJfE,EA9BU,SAAC,GAAgB,IAAd/G,EAAa,EAAbA,OACxB,OACI,sBAAKjG,UAAU,mBAAf,UACI,mBAAGA,UAAU,2BAAb,SACMiG,EAAO9F,KAEb,sBAAKH,UAAU,0BAAf,UACI,mBAAGA,UAAU,6BAAb,SACMiG,EAAO3B,MAEb,mBAAGtE,UAAU,kCAAb,eAGA,mBAAGA,UAAU,6BAAb,SACMiG,EAAO1B,YAEb,mBAAGvE,UAAU,kCAAb,eAGA,mBAAGA,UAAU,6BAAb,SACMiG,EAAOzB,aAGjB,mBAAGxE,UAAU,4BAAb,SACMiG,EAAO9B,cCoBV8I,EAzCO,WAAO,IAEjBxL,EAASN,IAATM,KAER,OACI,sBAAKtB,GAAG,gBAAgBH,UAAU,gBAAlC,UACI,oBAAIA,UAAU,oBAAd,qBAGA,sBAAKA,UAAU,oBAAf,UACI,sBAAKA,UAAU,0BAAf,UACI,mBAAGA,UAAU,iDACb,mBAAGA,UAAU,6BAAb,uBAIJ,sBAAKA,UAAU,0BAAf,UACI,mBAAGA,UAAU,iDACb,mBAAGA,UAAU,6BAAb,4BAIJ,sBAAKA,UAAU,0BAAf,UACI,mBAAGA,UAAU,kDACb,mBAAGA,UAAU,6BAAb,2BAKR,qBAAKA,UAAU,mBAAf,SACKyB,EAAKwC,QAAQmF,KAAI,SAACnD,EAAQ9C,GAAT,OACd,cAAC,EAAD,CAEI8C,OAAQA,GAFZ,2BAC6B9C,aCnBlC+J,EAhBQ,SAAC,GAAqB,IAAnBrN,EAAkB,EAAlBA,MAAO8J,EAAW,EAAXA,KAEzBwD,EAAwB,eAAVtN,GAA0B,IAE5C,OACI,sBAAKG,UAAU,iBAAf,UACI,mBAAGA,UAAU,wBAAb,SACMH,IAEN,oBAAGG,UAAU,uBAAb,UACMmN,EAAexD,SCyBlByD,EAhCI,WAAO,IAEd3L,EAASN,IAATM,KAIR,OACI,sBAAKtB,GAAG,aAAaH,UAAU,aAA/B,UACI,oBAAIA,UAAU,iBAAd,wBAGA,sBAAKA,UAAU,gBAAf,UACI,cAAC,EAAD,CAEIH,MAAM,aACN8J,KAAMlI,EAAKkD,MAFP,uBAIR,cAAC,EAAD,CAEI9E,MAAM,gBACN8J,KAAMlI,EAAKwC,QAAQmB,QAFf,0BAIR,cAAC,EAAD,CAEIvF,MAAM,kBACN8J,KAAMlI,EAAKiD,YAAYU,QAFnB,+BCsBTiI,EA9CM,SAAC,GAA8C,IAA5CtN,EAA2C,EAA3CA,WAAYD,EAA+B,EAA/BA,WAAY+M,EAAmB,EAAnBA,aAEpC3F,EAAcL,IAAdK,UACA4B,EAAYhC,IAAZgC,QAEJwE,EAAepG,GACf,yBAAQlH,UAAU,oBAAoBC,QAAS,kBAS/CH,EAAW,gBACX+M,GAAa,IAVb,UACI,mBAAG7M,UAAU,yCACb,mBAAGA,UAAU,uBAAb,uBAyBR,OACI,sBAAKG,GAAG,eAAeH,UAAU,eAAjC,UACMsN,EACF,yBAAQtN,UAAU,oBAAoBC,QAAS,WAf/CiH,GACApH,EAAW,WACX+M,GAAa,KAGb9M,EAAW,QACXD,EAAW,WACX+M,GAAa,GACb/D,MAOA,UACI,mBAAG9I,UAAU,sCACb,mBAAGA,UAAU,uBAAb,6BCvBDuN,EAdA,SAAC,GAA8C,IAA5CxN,EAA2C,EAA3CA,WAAYD,EAA+B,EAA/BA,WAAY+M,EAAmB,EAAnBA,aACtC,OACI,sBAAK1M,GAAG,SAASH,UAAU,SAA3B,UACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,CACID,WAAYA,EACZD,WAAYA,EACZ+M,aAAcA,QC6BfW,EAvCC,SAAC,GAA8C,IAA5CzN,EAA2C,EAA3CA,WAAYD,EAA+B,EAA/BA,WAAY+M,EAAmB,EAAnBA,aAE/B/D,EAAYhC,IAAZgC,QAcR,OACI,sBAAK3I,GAAG,UAAUH,UAAU,UAA5B,UACI,oBAAIA,UAAU,cAAd,uBAGA,sBAAKA,UAAU,iBAAf,UACI,yBAAQA,UAAU,sBAAsBC,QAAS,kBAjBzDH,EAAW,gBACX+M,GAAa,IAgBL,UACI,mBAAG7M,UAAU,2CACb,mBAAGA,UAAU,yBAAb,uBAIJ,yBAAQA,UAAU,sBAAsBC,QAAS,kBAlBzDF,EAAW,QACXD,EAAW,WACX+M,GAAa,QACb/D,KAeQ,UACI,mBAAG9I,UAAU,iDACb,mBAAGA,UAAU,yBAAb,gCCjCPyN,EAAS,CAClB,CAAC,gEACD,CAAC,oGACD,CAAC,yMAAqC,gDAAc,8FACpD,CAAC,qEAAe,mGAAoB,yGAAqB,yDAAa,+GAAsB,qHAAuB,qGCoBxGC,EAtBG,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,aAEnBC,EAAsBD,GAAgBA,EAAaxE,KAAI,SAACzI,EAAMwC,GAAP,OACvD,mBAA8BnD,UAAU,oBAAxC,SACMW,GADN,gBAAiBgN,EAAjB,YAAyBxK,OAO7B,OAFA2K,QAAQC,IAAIF,GAGR,sBAAK7N,UAAU,YAAf,UACI,mBAAGA,UAAU,kBAAb,SACM2N,IAEN,qBAAK3N,UAAU,iBAAf,SACM6N,QCWHG,EAxBD,WAEV,IAAIC,EAAeR,GAAUA,EAAOrE,KAAI,SAACzI,EAAMwC,GAAP,OACpC,cAAC,EAAD,CAEIwK,KAAOxK,EAAI,EACXyK,aAAejN,GAHnB,oBACsBwC,OAM1B,OACI,qBAAKhD,GAAG,QAAQH,UAAU,UAA1B,SACI,sBAAKA,UAAU,uBAAf,UACI,oBAAIA,UAAU,YAAd,yBAGA,qBAAKA,UAAU,eAAf,SACEiO,UCVHC,EAVC,WACZ,OACI,qBAAK/N,GAAG,UAAUH,UAAU,UAA5B,SACI,qBAAKA,UAAU,iBAAf,wBC6DGmO,MAxDf,WAAgB,IAAD,EAEmB3M,mBAAS,WAF5B,mBAEJ4M,EAFI,KAEKtO,EAFL,OAGuB0B,oBAAS,GAHhC,mBAGJoL,EAHI,KAGOC,EAHP,OAI2BrL,mBAAS,QAJpC,mBAIJqK,EAJI,KAISwC,EAJT,KAMX,SAAStO,EAAWH,GAChByO,EAAezO,GAGnB,IAAM0O,EAAW,CACb7G,OACI,cAAC,EAAD,CAEI1H,WAAYA,EACZ8M,aAAcA,EACd/M,WAAYA,GAHR,UAMZyO,QACI,cAAC,EAAD,CAEIxO,WAAYA,EACZ8M,aAAcA,EACd/M,WAAYA,GAHR,UAMZ0O,MACI,cAAC,EAAD,IAEJC,QACI,cAAC,EAAD,IAEJC,QAAS,IAGb,OACI,sBAAK1O,UAAU,MAAf,UACMsO,EAASF,GACX,cAAC,EAAD,CAEIrO,WAAYA,EACZ6M,UAAWA,EACXC,aAAcA,EACd/M,WAAYA,GAJR,UAMR,cAAC,EAAD,CAEI+L,YAAaA,EACb9L,WAAYA,EACZD,WAAYA,GAHR,eCjDpB6O,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,UAINC,SAASC,eAAe,W","file":"static/js/main.c04125b4.chunk.js","sourcesContent":["import React from 'react'\n\nconst HomeBtn = ({ icon, page, title, setTopPage, changePage }) => {\n    \n    function handleClick() {\n        if (page === \"howto\") {\n            setTopPage(\"howto\");\n        } else {\n            changePage(page);\n        }\n    }\n\n    return (\n        <div className=\"homeBtn\" onClick={()=>handleClick()}>\n            <i className={`homeBtn__i ${icon}`} />\n            <p className=\"homeBtn__p\">{ title }</p>\n        </div>\n    )\n}\n\nexport default HomeBtn;\n","import React from 'react'\nimport HomeBtn from './HomeBtn'\n\nconst Home = ({ changePage, setTopPage }) => {\n    return (\n        <div id=\"home\" className=\"home\">\n            <HomeBtn\n                key=\"homebtn-play\"\n                page=\"setup\"\n                icon=\"fas fa-chevron-right\"\n                title=\"PLAY NOW\"\n                changePage={changePage}\n            />\n            <HomeBtn\n                key=\"homebtn-icon\"\n                page=\"howto\"\n                icon=\"fas fa-info\"\n                title=\"HOW TO PLAY\"\n                changePage={changePage}\n                setTopPage={setTopPage}\n            />\n        </div>\n    )\n}\n\nexport default Home;","export const SETUP_GAME_FORM = [\n    {\n        label: \"NUMBER OF PLAYERS\",\n        name: \"numberOfPlayers\",\n        min: 2,\n        max: 15,\n        defaultValue: 2,\n    },\n    {\n        label: \"NUMBER OF CARDSETS\",\n        name: \"numberOfCardsets\",\n        min: 1,\n        max: 100000,\n        defaultValue: 1,\n    },\n    {\n        label: \"INITIAL BALACE\",\n        name: \"initialBalance\",\n        min: 10,\n        max: 1000000,\n        defaultValue: 10,\n    },\n    {\n        label: \"INITIAL POOL\",\n        name: \"initialPool\",\n        min: 1,\n        max: 1000000,\n        defaultValue: 1,\n    }\n]","import React from 'react'\n\nconst SetupGrp = ({ item: { label, name, min, max, defaultValue } }) => {\n    return (\n        <div className=\"setupGrp\">\n            <label htmlFor={`setupGrp_${name}`} className=\"setupGrp__label\">\n                { label }\n            </label>\n            <input\n                id={`setupGrp_${name}`}\n                className=\"setupGrp__input\"\n                name={name}\n                type=\"number\"\n                min={min}\n                max={max}\n                defaultValue={defaultValue}\n                required\n            />\n        </div>\n    )\n}\n\nexport default SetupGrp;","import React, { useContext, useState } from \"react\";\n\nconst GameContext = React.createContext();\nconst GameFunctionsContext = React.createContext();\n\nexport function useGame() {\n    return useContext(GameContext);\n}\n\nexport function useGameFunctions() {\n    return useContext(GameFunctionsContext);\n}\n\nexport const GameProvider = ({ children }) => {\n\n    const GAME = {\n        numberOfPlayers: 0,\n        numberOfCardsets: 0,\n        initialPool: 0,\n        pool: 0,\n        cardReserve: [],\n        usedCards: [],\n        players: [],\n        gameHistory: [],\n        currentPlayerID: 0\n    }\n\n    const [game, setGame] = useState(null);\n    const [isGameOver, setIsGameOver] = useState(false);\n\n    // Generate Player\n    function generatePlayer({ numberOfPlayers, initialBalance }) {\n        // Take { numberOfPlayers } as argument, generate and return numberOfPlayers of players.\n\n        const PLAYERS = [];\n\n        for (let i = 0; i < numberOfPlayers; i++) {\n            PLAYERS.push({\n                id: i,\n                balance: Number(initialBalance),\n                isActive: true,\n                win: 0,\n                loseSmall: 0,\n                loseBig: 0\n            })\n        }\n\n        return PLAYERS\n    }\n\n    // Generate Cards\n    function generateCards({ numberOfCardsets }) {\n        // Take { numberOfCardsets } as argument, generate and return numberOfCardsets of card sets.\n\n        const CARD_SCHEME = {\n            spade: \"♠\",\n            heart: \"♥\",\n            club: \"♣\",\n            diamond: \"♦\",\n        }\n\n        const CARD_NUMBER = {\n            1: \"A\",\n            2: \"2\",\n            3: \"3\",\n            4: \"4\",\n            5: \"5\",\n            6: \"6\",\n            7: \"7\",\n            8: \"8\",\n            9: \"9\",\n            10: \"10\",\n            11: \"J\",\n            12: \"Q\",\n            13: \"K\",\n        }\n\n        const CARDS = [];\n\n        let id = 0;\n\n        for (let i = 0; i < numberOfCardsets; i++) {\n            for (const SCHEME in CARD_SCHEME) {\n                for (let j = 1; j < 14; j++) {\n                    CARDS.push({\n                        id,\n                        number: CARD_NUMBER[j],\n                        scheme: SCHEME,\n                        symbol: CARD_SCHEME[SCHEME],\n                        value: j\n                    })\n                    id++;\n                }\n            }\n        }\n        return CARDS;\n    }\n\n    // setupGame\n    function setupGame({ numberOfPlayers, initialBalance, numberOfCardsets, initialPool }) {\n        /*\n        Generate players and cards\n        Calculate initial pool\n        Randomly pick starting player\n        return default state\n        */\n\n        // Generate players\n        let players = generatePlayer({ numberOfPlayers, initialBalance });\n\n        // Generate cards\n        let cardReserve = generateCards({ numberOfCardsets });\n\n        // Calculate initial pool\n        let pool = initialPool * numberOfPlayers;\n\n        // Randomly pick starting player\n        let currentPlayerID = Math.floor(Math.random() * numberOfPlayers);\n\n\n        let newGame = {\n            numberOfPlayers,\n            numberOfCardsets,\n            initialPool,\n            players,\n            cardReserve,\n            pool,\n            currentPlayerID,\n            usedCards: [],\n            gameHistory: [],\n        }\n\n        // Return initial state\n        setGame(newGame);\n\n        return newGame;\n    }\n\n    // Check Reserve\n    function checkReserve() {\n        /*\n        Check total cards in the cardReserve\n        return false if less than 3\n        Check total money left on the pool\n        return true if more than $0\n        return false if 0 or less than 0\n        */\n       \n        //Check total cards in the cardReserve, return false if less than 3\n        let totalCardsRemaining = game.cardReserve.length;\n        if (totalCardsRemaining < 3) return false;\n        return true;\n    }\n\n    // Check Valid Players\n    function checkValidPlayers() {\n        return game.players.some(player => player.isActive);\n    }\n\n    // Check Valid Round\n    function checkValidGame() {\n        if (checkReserve() && checkValidPlayers()) return true;\n        return false;\n    }\n\n    // Add cardsets to reserve\n    function addCardsets({ numberOfCardsets }) {\n        /*\n        Generate cardsets: cardGenerator\n        Add them to cardReserve\n        */\n\n        setGame(prevState => ({\n            ...prevState,\n            cardReserve: generateCards({ numberOfCardsets })\n        }))\n    }\n\n    // Get woodwork cards\n    function getCard() {\n        /*\n        Randomly pick 1 card from card reserves\n        Call removeFromReserve()\n        return 1 card\n        */\n        let remainingNumberOfCards = game.cardReserve.length;\n        let randomIndex = Math.floor(Math.random() * remainingNumberOfCards);\n        let card = game.cardReserve.splice(randomIndex, 1)[0];\n        \n        setGame(prevState => ({\n            ...prevState,\n            usedCards: [...prevState.usedCards, card]\n        }))\n\n        return card;\n    }\n\n    // Get 2 cards\n    function get2Cards() {\n        /*\n        Randomly pick 2 cards from card reserves\n        Call removeFromReserve()\n        sort cards\n        return 2 sorted cards in Array format\n        */\n        let cardReserve = game.cardReserve;\n        let remainingNumberOfCards = cardReserve.length;\n        let card1 = cardReserve.splice(Math.floor(Math.random() * remainingNumberOfCards), 1)[0];\n        let card2 = cardReserve.splice(Math.floor(Math.random() * remainingNumberOfCards - 1), 1)[0];\n\n        setGame(prevState => ({\n            ...prevState,\n            usedCards: [...prevState.usedCards, card1, card2]\n        }))\n\n        return [card1, card2].sort((a, b) => a.value - b.value);\n    }\n\n    // Update player\n    function updatePlayer({ player }) {\n        /*\n        Update player\n        */\n\n        let playerIndex = game.players.findIndex(item => item.id === player.id);\n        let newPlayers = game.players.slice();\n        newPlayers[playerIndex] = player;\n        setGame(prevState => ({\n            ...prevState,\n            players: newPlayers,\n        }))\n    }\n\n    // Update pool\n    function updatePool({ pool }) {\n        /*\n        Update player\n        */\n\n        setGame(prevState => ({\n            ...prevState,\n            pool\n        }))\n    }\n\n    // Update state\n    function updateGame({ round }) {\n        /*\n        Add round to game history\n        Update State\n        */\n        setGame(prevState => ({\n            ...prevState,\n            gameHistory: [...prevState.gameHistory, round],\n        }))\n    }\n    \n    // Game Over\n    function gameOver() {\n        setGame(null)\n        setIsGameOver(false);\n    }\n\n    return(\n        <GameContext.Provider value={{ game, isGameOver }}>\n            <GameFunctionsContext.Provider value={{\n                setupGame, setGame, getCard, get2Cards, gameOver, updatePlayer, updatePool, updateGame, checkValidGame\n            }}>\n                { children }\n            </GameFunctionsContext.Provider>\n        </GameContext.Provider>\n    )\n}","import React, { useContext, useState } from \"react\";\n\nimport { useGame, useGameFunctions } from \"./GameContext\";\n\nconst RoundContext = React.createContext();\nconst RoundFunctionsContext = React.createContext();\n\nexport function useRound() {\n    return useContext(RoundContext);\n}\n\nexport function useRoundFunctions() {\n    return useContext(RoundFunctionsContext);\n}\n\nexport const RoundProvider = ({ children }) => {\n\n    const { game } = useGame();\n    const { setGame, setupGame, getCard, get2Cards, gameOver, updatePlayer, updatePool, checkValidGame } = useGameFunctions();\n    const [round, setRound] = useState(()=>setupRound());\n    const [nextRound, setNextRound] = useState(false);\n\n    // Initial Round\n    function setupInitialRound({ numberOfPlayers, initialBalance, numberOfCardsets, initialPool }) {\n\n        let newGame = setupGame({ numberOfPlayers, initialBalance, numberOfCardsets, initialPool })\n\n        // Check whose turn it is\n        let player = checkTurn({ newGame });\n\n        // Return an empty round object\n        setRound({\n            stage: \"woodworks\",\n            player: player,\n            woodworks: [],\n            bet: 0,\n            ball: null,\n            result: \"\",\n        })\n\n        setNextRound(true);\n    }\n\n    // Setup Round\n    function setupRound() {\n\n        // If game hasn't start, set round to null\n        if (!game) return null;\n        \n        // Check whose turn it is\n        let player = checkTurn({});\n\n        // Return an empty round object\n        setRound({\n            stage: \"woodworks\",\n            player: player,\n            woodworks: [],\n            bet: 0,\n            ball: null,\n            result: \"\",\n        })\n\n        setNextRound(true);\n    }\n\n    // Check turn\n    function checkTurn({ newGame }) {\n        /*\n        Return which player is playing the game\n        */\n\n        let source = !newGame ? game : newGame;\n\n        let players = source.players;\n        let nextPlayerID = source.currentPlayerID;\n        let nextPlayerFound = false;\n        let counter = 0;\n        \n        while (!nextPlayerFound) {\n            nextPlayerID += 1;\n            counter += 1;\n            \n            if (nextPlayerID === players.length) nextPlayerID -= players.length;\n            \n            if (players[nextPlayerID].isActive) nextPlayerFound = true;\n            if (counter === players.length + 1) return false;\n        }\n        \n        // Update game's currentPlayerID\n        setGame(prevState => ({\n            ...prevState,\n            currentPlayerID: nextPlayerID\n        }))\n\n        return players[nextPlayerID];\n    }\n\n    // Get woodworks\n    function getWoodworks() {\n        /*\n        Get woodworks cards to kick start the round\n        */\n\n        // Get 2 cards from reserve\n        let woodworks = get2Cards();\n\n        // Store cards to round's woodworks and update round stage to let player place bet\n        setRound(prevRound => ({\n            ...prevRound,\n            woodworks\n        }))\n    }\n\n    // Place bet\n    function placeBet({ bet }) {\n        /*\n        After player placed bet, set round stage to ball to let player get ball\n        */\n\n        setRound(prevRound => ({\n            ...prevRound,\n            stage: \"ball\",\n            bet\n        }))\n    }\n\n    // Get ball\n    function getBall() {\n        /*\n        User to get the ball\n        */\n\n        // Get card from reserve\n        let ball = getCard();\n        // Store cards to round's woodworks and update round stage to let player place bet\n        setRound(prevRound => ({\n            ...prevRound,\n            ball\n        }))\n    }\n\n    // Get result\n    function getResult() {\n        /*\n        Get the result of the round\n        */\n\n        let player = round.player;\n        let minVal = round.woodworks[0].value;\n        let maxVal = round.woodworks[1].value;\n        let CardVal = round.ball.value;\n        let pool = Number(game.pool);\n        let playerBalance = Number(player.balance);\n        let bet = Number(round.bet);\n        let prize = 0;\n\n        let result = CardVal > minVal && CardVal < maxVal\n                        ? \"win\"\n                        : CardVal === minVal || CardVal === maxVal\n                            ? \"loseBig\"\n                            : \"loseSmall\"\n\n        /*\n        Check the value of the ball\n        return \"win\", \"loseSmall\" or \"loseBig\"\n        */\n\n        // Adjust player's balance\n        switch (result) {\n            case \"win\":\n                playerBalance += bet;\n                pool -= bet;\n                prize = bet;\n                break;\n            case \"loseSmall\":\n                playerBalance -= bet;\n                pool += bet;\n                prize -= bet;\n                break;\n            case \"loseBig\":\n                playerBalance -= (bet * 2);\n                pool += (bet * 2);\n                prize -= (bet * 2);\n                break;\n            default:\n                break;\n        }\n\n        \n        // Update player's balance\n        player.balance = playerBalance;\n\n        // Check if player is still active\n        player.isActive = playerBalance > 0;\n\n        // Update player's stat\n        player[result]++;\n\n        // Update player\n        updatePlayer({ player });\n\n        // Update pool\n        updatePool({ pool })\n        \n        // Check pool\n        let hasNextRound = checkValidGame() && pool > 0;\n        \n        let roundResult = {\n            result, prize\n        };\n\n        setRound(prevState => ({\n            ...prevState,\n            stage: \"result\",\n            result: roundResult\n        }))\n\n        // Push previous round to game history\n        setGame(prevGame => ({\n            ...prevGame,\n            history: [...prevGame.gameHistory, roundResult]\n        }))\n\n        setNextRound(hasNextRound);\n\n        return roundResult;\n\n    }\n\n    function endRound() {\n        /*\n        reset round\n        */\n\n        // reset round\n        setupRound();\n    }\n\n    function endGame() {\n        /*\n        see final result\n        */\n\n        // reset round\n        setRound(null);\n        setNextRound(false);\n\n        // set game over\n        gameOver();\n    }\n\n\n    return(\n        <RoundContext.Provider value={{ round, nextRound }}>\n            <RoundFunctionsContext.Provider value={{\n                setRound, setupRound, setupInitialRound,\n                getWoodworks, placeBet, getBall, getResult, endRound, endGame\n            }}>\n                { children }\n            </RoundFunctionsContext.Provider>\n        </RoundContext.Provider>\n    )\n}","import React, { useRef } from 'react'\n\nimport { SETUP_GAME_FORM } from \"../../data/setupData\";\nimport SetupGrp from './SetupGrp';\n\nimport { useRoundFunctions } from \"../../context/RoundContext\";\n\nexport const SetupForm = ({ createGame, changePage }) => {\n\n    const { setupRound } = useRoundFunctions();\n\n    let formRef = useRef();\n\n    let formItems = SETUP_GAME_FORM.map((item, i) => (\n        <SetupGrp\n            key={`setupgrp-${i}`}\n            item={item}\n        />\n    ))\n\n    function handleSubmit(event) {\n        event.preventDefault();\n        const FORM = formRef.current;\n        //createGame({ numberOfPlayers, initialBalance, numberOfCardsets, initialPool });\n\n        let data = {};\n        SETUP_GAME_FORM.forEach(item => {\n            data[item.name] = FORM[item.name].value;\n        })\n        \n        createGame(data);\n        changePage(\"game\");\n    }\n\n    return (\n        <form className=\"setupForm\" ref={formRef} onSubmit={(event)=>handleSubmit(event)}>\n            <h1 className=\"setupForm__h1\">\n                GAME SETUP\n            </h1>\n            { formItems }\n            <button className=\"setupForm__btn\">\n                START GAME\n            </button>\n        </form>\n    )\n}\n\nexport default SetupForm;","import React from 'react'\nimport SetupForm from './SetupForm'\n\nimport { useGame, useGameFunctions } from \"../../context/GameContext\";\nimport { useRoundFunctions } from \"../../context/RoundContext\";\n\nconst Setup = ({ changePage }) => {\n\n    const { setupGame } = useGameFunctions();\n    const { setupInitialRound } = useRoundFunctions();\n\n    function createGame({ numberOfPlayers, initialBalance, numberOfCardsets, initialPool }) {\n        setupInitialRound({ numberOfPlayers, initialBalance, numberOfCardsets, initialPool });\n    }\n\n    return (\n        <div id=\"setup\" className=\"setup\">\n            <SetupForm\n                key=\"setupform\"\n                createGame={createGame}\n                changePage={changePage}\n            />\n        </div>\n    )\n}\n\nexport default Setup;","import React, {useState } from 'react'\n\nexport const GameCard = ({ card, handleCardClick, value }) => {\n    \n    const [cardClicked, setCardClicked] = useState(false);\n\n    const CARD_SCHEME = {\n        spade: \"bi bi-suit-spade-fill\",\n        heart: \"bi bi-suit-heart-fill\",\n        club: \"bi bi-suit-club-fill\",\n        diamond: \"bi bi-suit-diamond-fill\"\n    }\n\n    let gameCardDivClass = (card && (card.scheme === \"heart\" || card.scheme === \"diamond\")) && \"gameCard__div--pink\";\n\n    let display = cardClicked\n        ? (\n            <div className={`gameCard__div ${gameCardDivClass}`}>\n                <div className=\"gameCard__div__div\">\n                    <p className=\"gameCard__div__div__p\">{ card.number }</p>\n                </div>\n                <i className={`gameCard__div__i ${CARD_SCHEME[card.scheme]}`}></i>\n            </div>\n        )\n        : (\n            <i className=\"gameCard__i fas fa-question\"></i>\n        )\n\n    function handleClick({ value }) {\n        handleCardClick({ value });\n        setCardClicked(true);\n    }\n\n    return (\n        <div \n            className=\"gameCard\"\n            onClick={()=>handleClick({ value })}\n        >\n            { display }\n        </div>\n    )\n}\n\nexport default GameCard;\n","import React, { useEffect, useState } from 'react'\nimport GameCard from './GameCard';\n\nimport { useRound, useRoundFunctions } from \"../../context/RoundContext\";\n\nconst GameBall = ({ stage }) => {\n\n    const { round } = useRound();\n    const { getBall, getResult } = useRoundFunctions();\n    const [clicked, setClicked] = useState(false);\n\n    useEffect(() => {\n        if (!round.ball) setClicked(false);\n    })\n\n    function handleCardClick() {\n        if (!clicked) getResult();\n        setClicked(true);\n    }\n\n    let readyToGetCard = round.ball\n        ? (\n            <div className=\"gameBall__card\">\n                <GameCard\n                    key=\"gameball\"\n                    card={round.ball}\n                    handleCardClick={handleCardClick}\n                    value=\"ball\"\n                />\n            </div>\n        )\n        : (\n            <div className=\"gameBall__card\">\n                <button className=\"gameBall__card__btn\" onClick={()=>getBall()}>\n                    <i className=\"gameBall__card__btn__i fas fa-hand-point-up\" />\n                    <p className=\"gameBall__card__btn__p\">\n                        GET\n                    </p>\n                </button>\n            </div>\n        )\n\n    let display = {\n        woodworks: (\n            <div className=\"gameBall__card\">\n                <p className=\"gameBall__card__p\">\n                    You can get ball after placing bet.\n                </p>\n            </div>\n        ),\n        bet: (\n            <div className=\"gameBall__card\">\n                <p className=\"gameBall__card__p\">\n                    You can get ball after placing bet.\n                </p>\n            </div>\n        ),\n        ball: readyToGetCard,\n        result: (\n            <div className=\"gameBall__card\">\n                <GameCard\n                    key=\"gameball\"\n                    card={round.ball}\n                    handleCardClick={handleCardClick}\n                    value=\"ball\"\n                />\n            </div>\n        )\n    }\n    \n    return (\n        <div id=\"gameBall\" className=\"gameBall\">\n            <p className=\"gameBall__p\">\n                BALL\n            </p>\n            { display[stage] }\n        </div>\n    )\n}\n\nexport default GameBall;","import React, { useRef } from 'react';\n\nimport { useGame } from \"../../context/GameContext\";\nimport { useRound } from \"../../context/RoundContext\";\nimport { useRoundFunctions } from \"../../context/RoundContext\";\n\nconst GamePanelBet = () => {\n\n    const { game } = useGame();\n    const { round } = useRound();\n    const { placeBet } = useRoundFunctions();\n\n    let betRef = useRef();\n\n    const MAX_BET = round.player.balance > game.pool ? game.pool : round.player.balance;\n\n    function handleSubmit(event) {\n        event.preventDefault();\n        let bet = betRef.current.value;\n        placeBet({ bet });\n    }\n\n    return (\n        <form id=\"gamePanelBet\" className=\"gamePanelBet\" onSubmit={(event)=>handleSubmit(event)}>\n            <input \n                id=\"gamePanelBet__input\"\n                className=\"gamePanelBet__input\" \n                name=\"bet\"\n                type=\"number\"\n                min={1}\n                max={MAX_BET}\n                defaultValue={1}\n                required\n                ref={betRef}\n            />\n            <button type=\"submit\" className=\"gamePanelBet__btn\">BET</button>\n        </form>\n    )\n}\n\nexport default GamePanelBet;","import React from 'react';\n\nimport { useRound, useRoundFunctions } from \"../../context/RoundContext\"; \n\nconst GamePanelResult = ({ setTopPage }) => {\n\n    const { round, nextRound } = useRound();\n    const { endRound } = useRoundFunctions();\n\n    let result = round.result.result === \"win\"\n        ? \"WIN\"\n        : round.result.result === \"loseSmall\"\n            ? \"LOSE\"\n            : \"LOSE (DOUBLE)\";\n\n    let resultClass = round.result.result === \"win\"\n        ? \"gamePanelResult__div--win\"\n        : \"gamePanelResult__div--lose\"\n\n    function handleClick() {\n        if (nextRound) {\n            endRound();\n        } else {\n            setTopPage(\"result\");\n        }\n    }\n\n    return (\n        <div id=\"gamePanelResult\" className=\"gamePanelResult\">\n            <div id=\"gamePanelResult__div\" className={`gamePanelResult__div ${resultClass}`}>\n                <p className=\"gamePanelResult__div__p\">\n                    { result }\n                </p>\n                <p className=\"gamePanelResult__div__data\">\n                    ${round.result.prize}\n                </p>\n            </div>\n            <button className=\"gamePanelResult__btn\" onClick={()=>handleClick()}>\n                {nextRound ? \"Next round\" : \"See result\"}\n            </button>\n        </div>\n    )\n}\n\nexport default GamePanelResult;","import React from 'react'\nimport GamePanelBet from './GamePanelBet'\nimport GamePanelResult from './GamePanelResult'\n\nimport { useRound } from \"../../context/RoundContext\";\n\nconst GamePanelControl = ({ changePage, setTopPage }) => {\n\n    const { round } = useRound();\n\n    let display = {\n        woodworks: (\n            <div className=\"gamePanelControl__step\">\n                <p className=\"gamePanelControl__step__number\">1</p>\n                <p className=\"gamePanelControl__step__p\">CLICK TO GET WOODWORKS</p>\n            </div>\n        ),\n        bet: (\n            <div className=\"gamePanelControl__step\">\n                <p className=\"gamePanelControl__step__number\">2</p>\n                <GamePanelBet\n                    key=\"gamepanelbet\"\n                />\n            </div>\n        ),\n        ball: (\n            <div className=\"gamePanelControl__step\">\n                <p className=\"gamePanelControl__step__number\">3</p>\n                <p className=\"gamePanelControl__step__p\">CLICK TO GET BALL</p>\n            </div>\n        ),\n        result: (\n                <GamePanelResult \n                    changePage={changePage}\n                    setTopPage={setTopPage}\n                />\n        )\n    }\n\n    return (\n        <div className=\"gamePanelControl\">\n            { display[round.stage] }\n        </div>\n    )\n}\n\nexport default GamePanelControl;","import React from 'react';\n\nimport { useGame } from \"../../context/GameContext\";\nimport { useRound } from \"../../context/RoundContext\";\n\nconst GamePanelInfoGrp = ({ title, data }) => {\n\n    let symbol = (title === \"BALANCE\" || title === \"POOL\") && \"$\";\n    let playerClass = title === \"PLAYER\" && \"gamePanelInfoGrp__data--player\";\n\n    return (\n        <div className=\"gamePanelInfoGrp\">\n            <p className=\"gamePanelInfoGrp__title\">{ title }</p>\n            <p className={`gamePanelInfoGrp__data ${playerClass}`}>{ symbol }{ data }</p>\n        </div>\n    )\n}\n\nconst GamePanelInfo = () => {\n\n    const { game } = useGame();\n    const { round } = useRound();\n\n    return (\n        <div className=\"gamePanelInfo\">\n            <GamePanelInfoGrp\n                key=\"gamePanelInfoGrp-player\"\n                title=\"PLAYER\"\n                data={round.player.id}\n            />\n            <GamePanelInfoGrp\n                key=\"gamePanelInfoGrp-balance\"\n                title=\"BALANCE\"\n                data={round.player.balance}\n            />\n            <GamePanelInfoGrp\n                key=\"gamePanelInfoGrp-pool\"\n                title=\"POOL\"\n                data={game.pool}\n            />\n            <GamePanelInfoGrp\n                key=\"gamePanelInfoGrp-cards\"\n                title=\"CARDS\"\n                data={game.cardReserve.length}\n            />\n        </div>\n    )\n}\n\nexport default GamePanelInfo;\n","import React from 'react'\nimport GamePanelControl from './GamePanelControl'\nimport GamePanelInfo from './GamePanelInfo'\n\nconst GamePanel = ({ changePage, setTopPage }) => {\n    return (\n        <div id=\"gamePanel\" className=\"gamePanel\">\n            <GamePanelInfo\n                key=\"gamepanelinfo\"\n            />\n            <GamePanelControl\n                key=\"gamepanelControl\"\n                changePage={changePage}\n                setTopPage={setTopPage}\n            />\n        </div>\n    )\n}\n\nexport default GamePanel;","import React, { useEffect, useState } from 'react'\nimport GameCard from './GameCard';\n\nimport { useRound, useRoundFunctions } from \"../../context/RoundContext\";\n\n\nconst GameWoodWorks = () => {\n\n    const { round } = useRound();\n    const { setRound, getWoodworks } = useRoundFunctions();\n    const [clicked, setClicked] = useState(new Set);\n    const [disabled, setDisabled] = useState(false);\n\n    useEffect(() => {\n        setNewClicked();\n    }, [round])\n\n    function setNewClicked() {        \n        if (round.woodworks.length === 0) {\n            setClicked(new Set());\n            setDisabled(false);\n        }\n    }\n\n    function handleCardClick({ value }) {\n        clicked.add(value);\n        setClicked(clicked);\n\n        if (clicked.size === 2 && !disabled) {\n            setRound(prevState => ({\n                ...prevState,\n                stage: \"bet\"\n            }))\n            setDisabled(true);\n        }\n    }\n\n    let display = round.woodworks.length > 0\n        ? (\n            <div className=\"gameWoodWorks__cards\">\n                <GameCard\n                    key=\"woodwork-min\"\n                    card={round.woodworks[0]}\n                    handleCardClick={handleCardClick}\n                    value=\"min\"\n                />\n                <GameCard\n                    key=\"woodwork-max\"\n                    card={round.woodworks[1]}\n                    handleCardClick={handleCardClick}\n                    value=\"max\"\n                />\n            </div>\n        )\n        : (\n            <div className=\"gameWoodWorks__cards\">\n                <button className=\"gameWoodWorks__cards__btn\" onClick={()=>getWoodworks()}>\n                    <i className=\"gameWoodWorks__cards__btn__i fas fa-hand-point-up\" />\n                    <p className=\"gameWoodWorks__cards__btn__p\">\n                        GET\n                    </p>\n                </button>\n            </div>\n        )\n\n    return (\n        <div id=\"gameWoodWorks\" className=\"gameWoodWorks\">\n            <p className=\"gameWoodWorks__p\">\n                WOODWORKS\n            </p>\n            { display }\n        </div>\n    )\n}\n\nexport default GameWoodWorks;","import React from 'react'\nimport GameBall from './GameBall';\nimport GamePanel from './GamePanel'\nimport GameWoodWorks from './GameWoodWorks';\n\nimport { useRound } from \"../../context/RoundContext\";\n\nconst Game = ({ changePage, setTopPage }) => {\n\n    const { round } = useRound();\n\n    return (\n        <div id=\"game\" className=\"game\">\n            <GameWoodWorks />\n            <GameBall \n                key=\"gameball\"\n                stage={round.stage}\n            />\n            <GamePanel \n                stage={round.stage}\n                changePage={changePage}\n                setTopPage={setTopPage}\n            />\n        </div>\n    )\n}\n\nexport default Game;","import React from 'react'\n\nimport Home from \"../home/Home\";\nimport Setup from \"../setup/Setup\";\nimport Game from \"../game/Game\";\n\nconst Content = ({ currentPage, changePage, setTopPage }) => {\n\n    const PAGE = {\n        home: (\n            <Home \n                changePage={changePage}\n                setTopPage={setTopPage}\n            />\n        ),\n        setup: (\n            <Setup \n                changePage={changePage}\n            />\n        ),\n        game: (\n            <Game \n                changePage={changePage}\n                setTopPage={setTopPage}\n            />\n        )\n    }\n\n    return (\n        <div id=\"content\" className=\"content\">\n            { PAGE[currentPage] }\n        </div>\n    )\n}\n\nexport default Content;","import React from 'react'\n\nconst NavLogo = () => {\n    return (\n        <div id=\"navLogo\" className=\"navLogo\">\n            <h1 className=\"navLogo__h1\">G2SHOOT</h1>\n        </div>\n    )\n}\n\nexport default NavLogo;","import React from 'react'\n\nconst NavMenuGrp = ({ title, path, handleChangePage }) => {\n    return (\n        <li className=\"navMenu__ul__li\" onClick={()=>handleChangePage(path)}>\n            { title }\n        </li>\n    )\n}\n\nexport default NavMenuGrp;","import React from 'react'\nimport NavMenuGrp from './NavMenuGrp';\n\nimport { useGame } from \"../../context/GameContext\";\nimport { useRound } from \"../../context/RoundContext\";\n\nconst NavMenu = ({ handleChangePage, handleShowResult, handleShowEndGame, handleTopPage }) => {\n\n    const { game } = useGame();\n    const { round } = useRound();\n\n    let resume = game && (\n        <NavMenuGrp\n            key=\"navmenu-resume\"\n            title=\"RESUME\"\n            path=\"game\"\n            handleChangePage={handleChangePage}\n        />\n    )\n\n    let endGame = game && (\n        <li className=\"navMenu__ul__li\" onClick={()=>handleTopPage(\"endgame\")}>\n            END GAME\n        </li>\n    )\n\n    let play = !game && (\n        <NavMenuGrp\n            key=\"navmenu-setup\"\n            title=\"PLAY\"\n            path=\"setup\"\n            handleChangePage={handleChangePage}\n        />\n    )\n\n    let result = round && (\n        <li className=\"navMenu__ul__li\" onClick={()=>handleTopPage(\"result\")}>\n            RESULT\n        </li>\n    )\n\n    let home = !game && (\n        <NavMenuGrp\n            key=\"navmenu-home\"\n            title=\"HOME\"\n            path=\"home\"\n            handleChangePage={handleChangePage}\n        />\n    )\n\n    return (\n        <div className=\"navMenu\">\n            <ul className=\"navMenu__ul\">\n                { resume }\n                { endGame }\n                { play }\n                { result }\n                { home }\n                <li className=\"navMenu__ul__li\" onClick={()=>handleTopPage(\"howto\")}>\n                    HOW TO PLAY\n                </li>\n                <li className=\"navMenu__ul__li\" onClick={()=>handleTopPage(\"contact\")}>\n                    CONTACT\n                </li>\n            </ul>\n        </div>\n    )\n}\n\nexport default NavMenu;","import React, { useState } from 'react'\nimport NavLogo from './NavLogo';\nimport NavMenu from \"./NavMenu\";\n\nconst Navbar = ({ changePage, navIsOpen, setNavIsOpen, setTopPage }) => {\n\n    let navBtnIcon = navIsOpen ? \"navbarBtn__i fas fa-times\" : \"navbarBtn__i fas fa-bars\";\n\n    let navMenu = navIsOpen && (\n        <NavMenu \n            key=\"navMenu\"\n            handleChangePage={handleChangePage}\n            handleTopPage={handleTopPage}\n        />\n    );\n\n    function handleNavOpen() {\n        setNavIsOpen(prevState => !prevState);\n    }\n\n    function handleChangePage(page) {\n        setNavIsOpen(false);\n        changePage(page);\n        setTopPage(\"default\")\n    }\n\n    function handleTopPage(page) {\n        setNavIsOpen(false);\n        setTopPage(page)\n    }\n\n    return (\n        <div id=\"navbar\" className=\"navbar\">\n            <NavLogo />\n            { navMenu }\n            <button className=\"navbarBtn\" onClick={()=>handleNavOpen()}>\n                <i className={navBtnIcon}></i>\n            </button>\n        </div>\n    )\n}\n\nexport default Navbar;","import React from 'react'\n\nconst ResultPlayerCard = ({ player }) => {\n    return (\n        <div className=\"resultPlayerCard\">\n            <p className=\"resultPlayerCard__player\">\n                { player.id }\n            </p>\n            <div className=\"resultPlayerCard__stats\">\n                <p className=\"resultPlayerCard__stats__p\">\n                    { player.win }\n                </p>\n                <p className=\"resultPlayerCard__stats__symbol\">\n                    :\n                </p>\n                <p className=\"resultPlayerCard__stats__p\">\n                    { player.loseSmall }\n                </p>\n                <p className=\"resultPlayerCard__stats__symbol\">\n                    :\n                </p>\n                <p className=\"resultPlayerCard__stats__p\">\n                    { player.loseBig }\n                </p>\n            </div>\n            <p className=\"resultPlayerCard__balance\">\n                { player.balance }\n            </p>\n        </div>\n    )\n}\n\nexport default ResultPlayerCard;","import React from 'react';\n\nimport { useGame } from \"../../context/GameContext\";\nimport ResultPlayerCard from './ResultPlayerCard';\n\nconst ResultPlayers = () => {\n\n    const { game } = useGame();\n\n    return (\n        <div id=\"resultPlayers\" className=\"resultPlayers\">\n            <h1 className=\"resultPlayers__h1\">\n                PLAYERS\n            </h1>\n            <div className=\"resultPlayerTitle\">\n                <div className=\"resultPlayerCard__title\">\n                    <i className=\"resultPlayerCard__title__i bi bi-person-fill\"></i>\n                    <p className=\"resultPlayerCard__title__p\">\n                        PLAYER\n                    </p>\n                </div>\n                <div className=\"resultPlayerCard__title\">\n                    <i className=\"resultPlayerCard__title__i bi bi-trophy-fill\"></i>\n                    <p className=\"resultPlayerCard__title__p\">\n                        W / L / Lx2\n                    </p>\n                </div>\n                <div className=\"resultPlayerCard__title\">\n                    <i className=\"resultPlayerCard__title__i fas fa-dollar-sign\"></i>\n                    <p className=\"resultPlayerCard__title__p\">\n                        BALANCE\n                    </p>\n                </div>\n            </div>\n            <div className=\"resultPlayersCon\">\n                {game.players.map((player, i) => (\n                    <ResultPlayerCard\n                        key={`resultplayercard-${i}`}\n                        player={player}\n                    />\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default ResultPlayers;","import React from 'react';\n\nconst ResultGameCard = ({ title, data }) => {\n\n    let moneySymbol = title === \"TOTAL POOL\" && \"$\";\n\n    return (\n        <div className=\"resultGameCard\">\n            <p className=\"resultGameCard__title\">\n                { title }\n            </p>\n            <p className=\"resultGameCard__data\">\n                { moneySymbol }{ data }\n            </p>\n        </div>\n    )\n}\n\nexport default ResultGameCard;","import React from 'react'\n\nimport { useGame } from \"../../context/GameContext\";\nimport ResultGameCard from './ResultGameCard';\n\nconst ResultGame = () => {\n\n    const { game } = useGame();\n\n    //<i className=\"resultGame__i fas fa-chart-bar\"></i>\n\n    return (\n        <div id=\"resultGame\" className=\"resultGame\">\n            <h1 className=\"resultGame__h1\">\n                GAME STATS\n            </h1>\n            <div className=\"resultGameCon\">\n                <ResultGameCard\n                    key=\"resultgamecard-pool\"\n                    title=\"TOTAL POOL\"\n                    data={game.pool}\n                />\n                <ResultGameCard\n                    key=\"resultgamecard-players\"\n                    title=\"TOTAL PLAYERS\"\n                    data={game.players.length}\n                />\n                <ResultGameCard\n                    key=\"resultgamecard-cards\"\n                    title=\"REMAINING CARDS\"\n                    data={game.cardReserve.length}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default ResultGame;","import React from 'react';\n\nimport { useRound, useRoundFunctions } from \"../../context/RoundContext\";\n\nconst ResultButton = ({ changePage, setTopPage, setNavIsOpen }) => {\n\n    const { nextRound } = useRound();\n    const { endGame } = useRoundFunctions();\n\n    let returnToGame = nextRound && (\n        <button className=\"resultButton__btn\" onClick={()=>handleResumeGame()}>\n            <i className=\"resultButton__btn__i fas fa-undo-alt\" />\n            <p className=\"resultButton__btn__p\">\n                RESUME\n            </p>\n        </button>\n    )\n\n    function handleResumeGame() {\n        setTopPage(\"default\");\n        setNavIsOpen(false);\n    }\n\n    function handleEndGame() {\n        // If the game is still active, redirect to EndGame to ask player again\n        if (nextRound) {\n            setTopPage(\"endgame\");\n            setNavIsOpen(false);\n        // If game over\n        } else {\n            changePage(\"home\");\n            setTopPage(\"default\");\n            setNavIsOpen(false);\n            endGame();\n        }\n    }\n\n    return (\n        <div id=\"resultButton\" className=\"resultButton\">\n            { returnToGame }\n            <button className=\"resultButton__btn\" onClick={()=>handleEndGame()}>\n                <i className=\"resultButton__btn__i fas fa-times\" />\n                <p className=\"resultButton__btn__p\">\n                    END GAME\n                </p>\n            </button>\n        </div>\n    )\n}\n\nexport default ResultButton;","import React from 'react'\nimport ResultPlayers from './ResultPlayers'\nimport ResultGame from './ResultGame'\nimport ResultButton from './ResultButton'\n\nconst Result = ({ changePage, setTopPage, setNavIsOpen }) => {\n    return (\n        <div id=\"result\" className=\"result\">\n            <ResultGame />\n            <ResultPlayers />\n            <ResultButton \n                changePage={changePage}\n                setTopPage={setTopPage}\n                setNavIsOpen={setNavIsOpen}\n            />\n        </div>\n    )\n}\n\nexport default Result;","import React from 'react';\nimport { useRoundFunctions } from '../../context/RoundContext';\n\nconst EndGame = ({ changePage, setTopPage, setNavIsOpen }) => {\n\n    const { endGame } = useRoundFunctions();\n\n    function handleResumeGame() {\n        setTopPage(\"default\");\n        setNavIsOpen(false);\n    }\n\n    function handleEndGame() {\n        changePage(\"home\");\n        setTopPage(\"default\");\n        setNavIsOpen(false);\n        endGame();\n    }\n\n    return (\n        <div id=\"endGame\" className=\"endGame\">\n            <h1 className=\"endGame__h1\">\n                END GAME?\n            </h1>\n            <div className=\"endGameButtons\">\n                <button className=\"endGameButtons__btn\" onClick={()=>handleResumeGame()}>\n                    <i className=\"endGameButtons__btn__i fas fa-undo-alt\" />\n                    <p className=\"endGameButtons__btn__p\">\n                        RESUME\n                    </p>\n                </button>\n                <button className=\"endGameButtons__btn\" onClick={()=>handleEndGame()}>\n                    <i className=\"endGameButtons__btn__i bi bi-box-arrow-right\" />\n                    <p className=\"endGameButtons__btn__p\">\n                        END GAME\n                    </p>\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default EndGame;\n","export const HOW_TO = [\n    [\"首先玩家議定下注底限\"],\n    [\"然後發牌者為每位玩家依序發兩張牌\"],\n    [\"第一位拿牌者依據桌面中央的彩金及自己兩張牌的點數決定要下注之金額，\", \"最低為底注100分，\", \"最高為當時桌面中央的彩金總額。\"],\n    [\"發牌者發給他第三張牌，\", \"若第三張牌點數介於前兩張牌之間，\", \"則該玩家可從彩金中拿取下注之金額；\", \"若在前兩張牌之外，\", \"則玩家必須賠一倍下注金額放入彩金中；\", \"若剛好與前兩張牌之一同點（稱為撞柱），\", \"則玩家賠二倍下注金額放入彩金中。\"]\n]","import React from 'react';\n\nconst HowtoCard = ({ step, descriptions }) => {\n\n    let descriptionsDisplay = descriptions && descriptions.map((item, i) => (\n        <p key={`howto-${step}-${i}`} className=\"howtocard__con__p\">\n            { item }\n        </p>\n    ))\n\n    console.log(descriptionsDisplay);\n\n    return (\n        <div className=\"howtocard\">\n            <p className=\"howtocard__step\">\n                { step }\n            </p>\n            <div className=\"howtocard__con\">\n                { descriptionsDisplay }\n            </div>\n        </div>\n    )\n}\n\nexport default HowtoCard;","import React from 'react';\n\nimport { HOW_TO } from \"../../data/howtoData\";\nimport HowtoCard from './HowtoCard';\n\nconst Howto = () => {\n\n    let howtoDisplay = HOW_TO && HOW_TO.map((item, i) => (\n        <HowtoCard\n            key={`howtocard-${i}`}\n            step={ i + 1}\n            descriptions={ item }\n        />\n    ))\n\n    return (\n        <div id=\"howto\" className=\"topPage\">\n            <div className=\"topPageContent howto\">\n                <h2 className=\"howto__h2\">\n                    HOW TO PLAY\n                </h2>\n                <div className=\"howto__steps\">\n                { howtoDisplay }\n            </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Howto;\n","import React from 'react'\n\nconst Contact = () => {\n    return (\n        <div id=\"contact\" className=\"topPage\">\n            <div className=\"topPageContent\">\n                CONTACT\n            </div>\n        </div>\n    )\n}\n\nexport default Contact;","import React, { useState } from \"react\";\nimport './App.css';\n\nimport Content from \"./components/content/Content\";\nimport Navbar from \"./components/navbar/Navbar\";\nimport Result from \"./components/result/Result\";\nimport EndGame from \"./components/endGame/EndGame\";\nimport Howto from \"./components/howto/Howto\";\nimport Contact from \"./components/contact/Contact\";\n\nfunction App() {\n\n    const [topPage, setTopPage] = useState(\"default\");\n    const [navIsOpen, setNavIsOpen] = useState(false);\n    const [currentPage, setCurrentPage] = useState(\"home\");\n\n    function changePage(page) {\n        setCurrentPage(page);\n    }\n\n    const TOP_PAGE = {\n        result: (\n            <Result\n                key=\"result\"\n                changePage={changePage}\n                setNavIsOpen={setNavIsOpen}\n                setTopPage={setTopPage}\n            />\n        ),\n        endgame: (\n            <EndGame \n                key=\"result\"\n                changePage={changePage}\n                setNavIsOpen={setNavIsOpen}\n                setTopPage={setTopPage}\n            />\n        ),\n        howto: (\n            <Howto />\n        ),\n        contact: (\n            <Contact />\n        ),\n        default: \"\"\n    }\n\n    return (\n        <div className=\"App\">\n            { TOP_PAGE[topPage] }\n            <Navbar \n                key=\"navbar\"\n                changePage={changePage}\n                navIsOpen={navIsOpen}\n                setNavIsOpen={setNavIsOpen}\n                setTopPage={setTopPage}\n            />\n            <Content\n                key=\"content\"\n                currentPage={currentPage}\n                changePage={changePage}\n                setTopPage={setTopPage}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport { GameProvider } from './context/GameContext';\nimport { RoundProvider } from './context/RoundContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GameProvider>\n      <RoundProvider>\n        <App />\n      </RoundProvider>\n    </GameProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}